<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[2019日常]]></title>
    <url>%2Fpassages%2F2019-02-20-2019%E6%97%A5%E5%B8%B8%2F</url>
    <content type="text"><![CDATA[2018-02-20 抗拒自己的欲望，或者延迟满足欲望 质疑貌似最可信的言论，不盲从任何人 屏蔽流行信息，或者只在固定的时段接收流行信息 思考最不可能的事，为其发展出可能性 保留和发展自己的“怪癖”，并将其发展成自己的竞争力 为小事物狂热，并在小事物中发现大世界 开展思想实验和行动实验，让思想和行动相互激发 2019-03-14别人总问我为什么来这座城市，说出没结尾的故事没意义，只能苦笑说是梦的指引。 2019-03-15混乱无序的秩序，单方面可悲的勉强，低效的输入进展。是不到满身伤痕，是不会让我顿悟吗。 2019-03-16你所看到的,就是生活最合理的安排,不必忿忿不平,不用念念不忘,不需斤斤计较。 你想伸手说出舍不得走，它却高傲的抬起了头，生活你永远猜不透，如若相逢无须问侯，就像多年失散的朋友 但凡刻骨铭心，必定伤筋动骨。 2019-03-19邓宁·克鲁格效应说的是一种认知偏差现象，指的是能力欠缺的人在自己欠考虑的思考基础上得出错误结论，正如达尔文所说“无知比博学更容易带来自信。” 而当一个人开始学习新的知识，他原有的认知可能会被打破，这时候就陷入了绝望之谷。如果就此放弃，也可以在固有的思维和世界里打转，如果选择继续学习，将进入一个缓慢重新构建认知的过程，也就是开悟之坡，而这点滴知识与经验的累积会使你终将成为大师。 2019-04-02我选择坚持]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[至灰时刻]]></title>
    <url>%2Fpassages%2F2018-12-25-%E8%87%B3%E7%81%B0%E6%97%B6%E5%88%BB%2F</url>
    <content type="text"><![CDATA[我想和自己坐下来好好谈谈，我不是绝望我是沉重，用自怨自艾的方式梳理年岁里又沉又重的情绪。 生活2018年很多人人设不断在崩塌，只有自己一稳如故，自卑，逃避的性格是困境的主因，但难以更改。偏执渐渐消淡，个人价值也慢慢看不到，自己变更加封闭，狭隘，不愿再去改变什么，孤僻裹挟着自己。 现在对生活的看法刻意的混沌着，每次它的无法预料，都坦然接受。对它毫无意义的内耗，给自己带来的只有损伤，和自我否定，几乎要丧失正视和面对自己和未来的勇气。很羡慕周围的人，活的庸庸碌碌浑然不觉，他们可能并不是对生活感知太少，而是清楚的知道自己的平庸，明白社会的各种设定，只是选择了随波逐流得过确过。 过的最痛苦的莫过于你这类人，不甘心做一个平庸的人，却没有异秉的天赋。害怕沉溺于舒适的生活，却只能在无所事事不可遏制的焦虑中沉沦。生活糟糕得一塌糊涂，这是必须接受事实，悲悯的自我挣扎和徘徊改变不了现状。要学会的是放开那个封闭得自己，重塑那个被崩坏的信心，还有要创造。 工作年初经历了一场大雪，让十几年没见雪的自己真实的高兴了一会，这算是生活的仅有亮色吧。 在年初这份工作里，密集的工作量，让自己痛苦不堪，还有不认同的工作模式加剧了辞职的决心，最重要的还是不满意的薪水吧。我认为工作和生活是分不开的，我喜欢工作，因为它是我人生价值感的主要来源之一，但也不打算因为工作透支了身体健康。在确定了自己必须要离开这里后，就开始找下家了，不敢裸辞负债太多。 第二份工作进了一家区块链公司新兴行业，很符合自己的预期:拓宽自己的领域，为未来储备。事与愿违的是工作性质和以前没多大区别，围绕着 API。新鲜感过去了，又陷回了和之前一样的职业困顿，但至少这次我站在了一个崭新领域的门口。在一个稀松平常的午后，整个部门因为行业不景气，都被当天遣散了。恍惚和失语让我持续了几天，在时代这个无形的力量面前，想拒绝但没能力。 第三份工作，自己在毫无感知的情况下入职了，不喜不悲，放弃了对这份工作的规划，有可能这只是空档的过渡，也有可能是连接外面世界的新桥梁吧，谁能说的清楚呢。 年末这里迎接了新的一轮大雪，但情绪截然不同。 感情友情，我并不是一个薄凉的人，只是从不伪装自我的喜恶，正因为这样才少有人接近吧。以前自己从不会刻意联系朋友，现在才觉得错过了很多东西，分享和倾听彼此生活的喜怒，是生活里难得的体验。 亲情，这是我身上的唯一牵绊，有时候压的我无力行走，却不能抱有抱怨。思想的隔阂的鸿沟，让我们终成两个世界的人，我能做的只有少让你们感到难过。今年阔别两年的归家，再深刻了一番时间的残酷，母亲漫不经心的谈起这几年身体的变化，规劝着让我们回家发展，自己却只能隐忍着情感，不辩解也不应答。父亲脾气还是那么差，只会讓着问在外面能挣多少钱，能否养活自己…他们是集体意志中成长的，集体浇筑了他们的灵魂，所以他们本能的希望下一代也是这样生活，我只想跟随内心的感觉，这里没有谁的过错。 爱情，这里我应该留空白，因为从未得到过，只有隐秘的想象。自己是个过于理性，情感十分稀缺，低调的人，却遇到了有过于相同特质的人，敏感和极度缺乏安全感，把自己保护的无从接近。在一段关系的开始过于用力投入，不懂进退，忘记了自我完整，这也常常给自己带来疲惫，挣扎，想放弃。感激对方在自己生活出现，我只是为自己而难过。或许要把爱情看成一味生活调剂，生活的本味永远自己酝酿，它带来的只会是一点点治愈。 学习现在越来越少关注的知识的领域，反而花更多时间在技能的提升和输出上，即使从没有拿得出手的成熟作品。从以前的盲目汲取知识，现在算一点进步吧，有目的的搭建自己的技术框架。 系统性的学习了区块链知识，对它的方向和轮廓大致明白了。 终于如愿的用上了 docker。 逐渐摆脱了书影音的桎梏，这是去年立下 flag，因为想要更专注了一个领域，杜绝能分散自己注意力的爱好。但还是看了不少，但都是泛泛而读，缺少理解和浸泡。有输出才算真正的吸收。 总结经历 2018，这是灰暗的一年，黯淡无光没有一丝转机，我一如既往在阴霾里无法走出。在这至灰至暗的时刻，我也不知道眼前的路该抵达何方，但这是自己拣选的归属，一切纠结，一切磕绊都是。 1陌生人，我没有宽慰的话，那样的话从何说起。我没有安慰的手，那样的手没有肩头可以落下。我只想告诉你：你所经历的我也曾经抵达，我正遭受的也许甚于你的今天。可是，我还是想和你做一个约定，就像是守望那间小店一样的邀约：我在春天等你，希望你也能同样到达。 ---和菜头]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「原则」札记]]></title>
    <url>%2Fpassages%2F2018-04-11-%E3%80%8C%E5%8E%9F%E5%88%99%E3%80%8D%E7%A4%BC%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[来源：https://book.douban.com/review/9128567/ 我的历程3p 在一生中，我们会做出无数的决定，这些决定实质上都是赌博，一些是大赌，一些是小赌。思考我们如何做出决定是有好处的，因为这将最终决定我们的生活质量。 3p 我们所有人天生就有不同的思维能力，但我们不是天生就有决策能力。我们只能在接触现实的过程中去学习决策能力……改变决策方式的最佳途径，就是总结经验。 5p 在培养人际关系时，你的原则和别人的原则将决定你们如何互动。拥有共同原则的人才会相处融洽，反之则会不断产生误解和冲突。 6p 成功的关键在于，既知道如何努力追求很多东西，也知道如何“正确地失败”——能够在经历失败的痛苦过程中吸取重要的教训，从而避免被踢出局（错误的失败）。 8p 我的机械记忆力一直很差，不喜欢听从他人的指示做事，而是喜欢自己把事情弄明白。 9p 与失败比起来，我对乏味和平庸的恐惧要严重得多。 10p 大多数人会因为近期的经验而产生偏见。冥想则让我拥有平静的开放思维，让我可以不被人牵着鼻子走，更清晰、更有创造性地思考。 10p 你自己的原则是不是系统化或者计算机化，并不是最重要的。最重要的事情是总结出你自己的原则，最好将其写下来，尤其是在你与其他人共事的情况下。 12p 通过将新闻和市场走向结合起来观察，我开始看到整个图景，并开始理解政治与经济之间的因果关系。 12p 工作原则的确是以生活原则为基础，但由于组织的力量远远大于个人的力量，所以，工作原则比生活原则更重要。 20p 我的工作一直能把我带到各种充满异国情调的场所，让我遇到有意思的人。如果我能从这些旅行中赚到钱的话，那不过是锦上添花。 22p 用付出的金额（而不是购买的商品数量）衡量需求，考察买家和卖家分别是谁以及他们为什么买卖，是一种实用得多的方式。 23p 当思考你真正想要的东西时，最好思考它们的相对价值，以便合理权衡。 23p 尽管赚钱很好，但拥有有意义的工作和人际关系要比赚钱好得多。对我而言，有意义的工作是指一项我能全身心投入的使命；有意义的人际关系是指我既深深地关心对方，对方也深深地关心我。 29p 时机就是一切。只有能承认甚至接受自身的弱点时，才能做出对自身有益的改变。 36p 谦逊不仅能平衡勇敢，还能让自己保持极度开放，允许其他人指出我可能疏忽的东西……这让我看到了很多维度，然后用可信度加权的方式综合这些不同角度的观点，来得到一个犯错可能性更低的决定。 36p 我犯下的代价惨痛的错误使我改变了看问题的角度，从“我知道我是对的”转变为“我怎么知道我是对的”在我的目标只是让自己正确——我不关心正确的答案是不是来源于我。 50p 在没有真正通过别人的视角看待事物之前就对别人下判断，会妨碍对他们所处环境的理解，而且这样做很不明智。 50p 请保持足够的好奇心，始终愿意去理解那些看问题与你不一样的人是怎么形成他们看问题的方式的。你将会发现很有趣，而且益处无穷，同时由此而获得的更丰富的视角将帮助你决定你应当怎么做。 55p 明智的人在经历各种沉浮时都始终盯紧稳健的基本面；而轻浮的人跟着感觉走，情绪化倾向重，对短期结果反应过度——不是失去信心，就是极端迷恋。 56p 与经验相比，我更看重个性、创造力和常识感。但低估经验的价值是严重的错误。 57p 不管在进行押注时多么有信心，依然可能是错的，而要降低风险又不降低收益，合理的多样化是关键。 58p 知道如何结合不同的回报流，要比能够选出好的回报流更有效果（不过显然你必须二者都做）。 63p 处理出错误的人，会让其他人日后倾向于隐瞒错误。用一套程序确保问题和分歧会摆在桌面上，同时确保它们俩的根源会得到剖析，才能实现持续的改进。 64p “问题日志”是第一项管理工具，在促使人们采用正确的行为方式方面发挥着关键作用。 65p 当面对两种你都需要但看起来矛盾的选择时，你需要耐心思考如何尽最大可能兼顾二者。几乎总有一条道路是存在但你没有找到的，所以你应该努力寻找直到找到，而不是凑合着接受那个看起来明智的选择。 75p 如果管理者不知道员工不同的思维方式，他就不知道员工将如何处理不同的情况，这就像一个工程领队不知道他的设备将如何工作一样。 85p 在各自的环境下，投资者被提倡独立思考，预测尚未发生的事情，用真金白银冒险投资；而决策者被孤立形成共识而非表达分歧，对已经发生的事情做出反应，重于培养训练谈判能力而非冒险投资能力。 86p 关于自身决策的质量，投资者能够得到持续的反馈，而政治家无法得到这种反馈，同时他们也必须不断地把注意力从他们眼前正在处理的问题上转移，以对抗其他决策者提出的反对意见。 89p 习惯和情绪障碍依然比理性要强，想要将认识转化为实际行动，还需要很多努力。 96p 极为坚韧的原因之一，是相对于追求梦想过程中经历的痛苦而言，实现梦想的决心更强烈。 97p 创造性、系统性、现实性合二为一，既坚决又开明。始终愿意在真实世界中检验头脑中的坚定规划，并调整做法以使规划效果变得更好。 98p 关心他人不等于要顾及他人，实现自己的目标远比取悦对方（或不让对方失望）更重要。 99p 人要变得特别成功需要看到很多东西，但任何人都看不到全景，只是有的人看的到多一些。自身视野宽阔，又能与其他聪明人良好地沟通，了解他们不同的有益视角，这样的人才会做得最好。 99p 世界上有很多人，但人的类型有限；有很多情况，但情况的类型有限。所以让合适的人应对合适的情况，是解决问题的关键。 102p 算法本质上就是在连续性基础上运行的原则。可以让人们把注意力集中在因果关系上，并以此培养真正的创意择优。 102p 好习惯源于以一种遵守原则的方式不断思考，就像学习说一种语言一样。好思维源于探求原则背后的逻辑。 123p 对历史抱有一种健康的尊重感，渴望对现实的机理形成普遍性的理解，并希望总结出永恒、普适的应对问题的原则。 生活原则135p 真相（对现实的准确理解）是任何良好结果的根本依据。 136p 头脑越开放，就越不会自欺，其他人也就越会给你诚实的反馈。 140p 自然比我更聪明，我努力让自然教我认识现实规律。自然会走向整体的最优化，而不是个体的最优化。因此个体的激励机制必须符合群体的目标。 145p 快速试错以适应现实：完美是不存在的，它是一个目标，激发永不停息是进化过程。 155p 如果人们过度重视决策的直接结果（通常是诱惑），而忽视后续和再后续的结果，就很难实现目标。 157p 区别作为机器设计者的你和作为机器中工作者的你。 176p 任务是方案和目标之间的纽带。 188p 不要担心自己的形象，只关心如何实现目标。我是在寻找最好的答案，而不是自己能得出最好的答案。 196p 谦逊通常来自人的失败经历 失败让人以一种开明心态积极了解自己不知道的东西。 205p 把不同的人组织起来，更好地发挥其长处，就像指挥交响乐团一样，做得好就很漂亮，做不好就很糟糕。 211p 有意义的工作和有意义的人际关系不仅是我们做出的美好选择，而且是我们天生的生理需求。 216p 最常发生的斗争是情绪和思考的斗争，为此，请善择你的习惯。 224p 创造者、推进者、改进者、贯彻者与变通者。 227p 塑造者=理想家+务实思考者+坚毅者，是能从构想一路走到构想实现的人。 232p 决策是一个两步流程（先了解后决定）。影响好决策的最大威胁是有害的情绪。 234p 所有东西都是放在眼前看更大…不要夸大新东西的好处（选择最好而不是最新）…不要过度分析细节 241p 毋需过于精确，谨记二八法则，不要做完美主义者。 251p 不能不合逻辑地高估自己的可信度，更不能不区分可信度不同的人。 252p 把你的原则转换成算法，让计算机和你一起决策。 257p 在深刻理解人工智能之前不要过度信赖它。谨记，计算机是没有常识的，很容易曲解现实。 263p 为了在其他人的帮助下做到最好，你必须理解人与人大不相同。 305p 一个机构就像一部机器，主要由两组部件构成：文化和人。 309p 为了拥有创造成功的激情 我需要从事有意义的工作、发展有意义的人际关系。对一个全球宏观经济投资者而言更是如此。 315p 创意择优=极度求真+极度透明+可信度加权 316p 把所有事情摆到桌面上的好处在于：（1）不必刻意展示好的一面；（2）节省了猜测别人想法的时间。 321p 原则总体上都是好的，但你要记住，每一个原则都有例外，没有任何一个原则能够取代常识判断。 工作原则1/3-打造良好的文化333p 英文正直来自于拉丁文“integritas”，意思是”一”或“完整，表里如一；反义词是当面一套、背后一套“duality”。 336p 极度透明会降低我们做错事的风险以及我们不当处置错误的风险。事实上，在极度透明的环境中，做坏事更难，发现事实、解决纠纷则更容易。还能让客户对媒体的不实报道不屑一顾。 338p 把极度透明的例外事项减到最少。换言之，在尽可能做到彻底透明的同时，也要保持必要的谨慎。 343p 人与人之间的关系应是真诚自然的，而不是刻意为之。 346p 真正关心公司发展的人占比越高，故意捣乱者的数量就越少，因为关心公司的人自然就会保护团队免受坏人破坏。 348p 公平（必需）与慷慨（适当）是有区别的。多数人只是假装为你工作，而实际上是在追求一己私利。 356p 不要纠结于“埋怨”还是“赞美”，而要专注于“准确”还是“不准确”。 367p 求取共识是双向的责任。 368p 每次会议都应当以实现某个人的目标为目的。那个人就是会议的负责人，并决定会议所期待的成果和会议方式。会议如果没有明确的主持人。则很可能陷入丧失方向和低效的境地。 369p 在任何讨论中，都要把与会者限定于你认为对实现你的目标最有帮助的人。挑选与会者最差的方式就是挑选那些与你观点相同的人。群体思维（大家都不表达独立观点）和个体思维（拒不接受别人的观点）都是危险的。 370p 不要因集体决策而丧失个人责任。 371p 虽然和所有人一对一的沟通很不错，但职位越高，越难以做到（时间成本几何暴涨），因此常识其他的信息分享办法非常必要。 375p 最具有可信度的观点来自：①多次成功地解决了相关问题的人；②能够有逻辑地解释结论背后因果关系的人。 378p 每个人都有自己的观点，但通常不是什么好点子。对所有人都一视同仁，更容易远离事实而不是接近事实。同时，对所有的观点都应当一一种开放的心态对待，但不是说这些观点都一样重要，而是要与观点表述人的经验、过去业绩适当联系起来。 380p 要更关注发言人的推理过程，而非其结论，所以没经验的人也不乏好点子。 381p 学生理解老师比老师理解学生更重要，尽管二者都重要。沟通是为了获得最佳回应，故应与最相关的人沟通。 381p 辩论的目的是找出事实真相，而不是为了证明谁是谁非，每个人都应当有意愿基于逻辑和证据而转变想法。 383p 无论像谁提问，对方一般都会提供“答案”，所以要提前确认对方的可信度。反过来，对自己更是如此，如果觉得自己回答这个问题的可信度不够，就不应该对此发表意见，更不要与人分享你的观点。 383p 让每个人都可肆意评论其他人的观点，此举低效且浪费时间。千万不要向无关人员提出问题，更不要把问题没有特别指向地散发出去。 384p 把大事抓好远比把小事做到极致更为重要。可信度加权是个工具（补充和挑战），不能取代责任人的决策。 393p 创意择优不是无法无天，尽管每个人都有权表达自己的观点，但他们无权做出谁是谁非的裁决。 工作原则2/3-用对人398p 个人成长最重要的因素是客观的自我评价，包括对自身缺点的认识。在健康的机构中，应该是员工与其低层次的自我进行斗争，而不是员工与员工相互竞争。 409p 价值观是驱动行为的深层信仰，决定着人际相处；能力体现在思考方式和行为方式上；技能则是可以习得的工具。 414p 当评估一个应聘者的品格、常识、眼界、创造力或者决事能力时，学习成绩的价值就很有限了。 416p 招人不仅是干份具体工作，你还要愿意与其分享你的生活。所以，要让求职者知道这份工作的阴暗面。 418p 想维系伟大的合作关系，比金钱更重要的是体贴和宽厚。 423p 认清优缺点后，个人会飞速成长。结果是，职业路径并非当初所料。 424p 动手实践的经验会形成内化学习，这是书本学习无法替代的。善于从书本学习的人倾向于寻求所学的记忆，按照指示说明从事工作；内化学习的人则会下意识地把思想转化为行动，就像走路一样平常。了解这些差别至关重要。 425p 有人被批评时只纠结于它的后果，而不是想想批评是否准确。这是错的。 425p 你对责任人的表现给出的评价，不是要看他们是否按你的方式行事，而是要确保他们按好的方式行事。 430p 评估人时，可能犯的两个错误是：对自己的评估过度自信；无法取得共识。 432p 了解人们怎样处事和判断这种处事方式能否取得好结果，比了解他们做了什么更重要。 435p 节约成本，让客户更加满意，对需要帮助的人提供帮助。 工作原则3/3-建造并进化你的机器446p 高层次的思考不是指级别高的人所做的思考，而是指自上而下地审视事物。 447p 出色的管理者是一家机构的工程师，而非哲学家、明星、实干家或艺术家。 448p 应对每个问题的手段都要服务于两种目的：①让你与目标更为接近；②能够对机器（人和设计）进行培训和测试。 449p 政策是原则的延伸，因此在制定规则时，要解释清楚背后的原则。 452p 角色错位是指某个工作岗位因为情势变化或临时需要而未经深思熟虑就做出变更，通常会导致让错误的人承担错误的职责，并使得工作分工变得模糊不清。 469p 担心出差错会为你提供一种保护，而对差错毫不担心，则可能让你暴露于风险。 490p 最好的设计来自对实际已发生问题的充分反思，而在你刚开始做一件事时，你通常会把设计建立在假想问题而非实际问题之上。因此，系统地跟踪梳理过往的问题是很有帮助的。 493p 设计是一个循环往复的过程，在不满意的“现在”与美好的“未来”之间有一个“不断努力”的阶段。 494p 在设计组织结构时，要围绕目标而不是围绕任务。 496p 临时分担和轮换资源是可以的，但与职责混同是两回事。而机构规模越大，信息科技管理和跨部门沟通就越重要。 497p 不仅要盯着自己的工作，还要关注如果你不在场，工作会如何开展。 504p 按你要求花钱的人在花钱上可能会大手大脚。这是因为①他们花的不是自己的钱；②很难知道正确的价格应该是多少。 506p 几乎做每件事所花费的时间和资金都比你预期的要多。这是因为先前的计划并未考虑过失败的情况。 512p 问题总归会发生，坏事迟早要上门，这就是现实。成功就是从失败到失败，也依然热情不改。 512p 怎样尽可能做更多的事： ①通过优先排序或直接拒绝来减少工作量； ②授权给合适的人去做； ③提高工作效率。 512p 不要把检查清单和个人责任相混淆。每个人都应当做好自己的所有工作，而不只是完成检查清单上的任务。 513p 有些人花了大量时间和精力却收效甚微，而另一些人却在同样时间里做了很多事。导致差别的，主要在于创造力、品性和智慧。 513p 创造力较强的人会发明出更高效的新方法；品性较好的人更善于应对所遇到的挑战和需求；智慧较多的人则能够保持平和的心态，站到更高层次上审视自己以及所面临的挑战，合理地进行优先排序，做出符合现实的设计和理性的选择。 515p 仅凭文字是不够的，不可能通过读读书就能学到很多本领，如果不实践，就基本不可能把行为改过来。 516p 领导者不应凌驾于原则之上，他们应是经过评价、遴选而确定的，如果需要的话，还能基于规则在尊重事实的基础上被替换掉。 516p 为了促成真正的行为改变，必须内化学习或养成习惯，经验实践比书本具有更强大的力量。 517p 当每个人都了解算法背后的思想，大家就能对其逻辑性、公平性进行评估，并参与其中，共同行动。 517p 一般而言，系统的作用就像一个教练。教练要了解队员的情况，搜集关于队员行为的数据，当队员表现很好或表现不佳，就成为有用的信息，可作为完善下一步工作的参考。 521p 因为权力能产生统治力量，所以权力必须被交到身处关键岗位、能力强的人手中，他们必须拥有正确的价值观，擅长本职工作，能够对别人的权力进行合理制衡。 525p 要确保从事履职评估的人：①有时间掌握被评估对象工作情况的全面信息；②有能力实施评估；③没有利害冲突阻碍其有效行使监督权。 535p 教练就像Siri一样，越来越有用。 542p 对于无法计量的事物，你肯定也管不好。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac 技巧分享]]></title>
    <url>%2Fpassages%2F2018-01-07-Mac%20%E6%8A%80%E5%B7%A7%E5%88%86%E4%BA%AB%2F</url>
    <content type="text"><![CDATA[Mac 技巧&amp;工具 工欲善其事，必先利其器,工匠想要使他的工作做好，一定要先让工具锋利。比喻要做好一件事，准备工作非常重要。 桌面操作系统三大桌面操作系统: windows , Linux , Mac OS Window 起源 window3.1, 是在 MSDOS 上包装了的图形界面，后续有 windows 95/2000/NT/win7 之流。 总体而言, windows 生态系统 支持厂商非常之多，应用软件多，市场占有率高(90%)，是居家娱乐必备。 Linux 起源于 1991 年 Linus 仿造 Minix 所编写的一个终端模拟器，随后，在开源和互联网的推动下，成长为 服务器领域不可撼动的老大， 据说，全球Top 5高性能计算机中，Linux 占 4席，完全没有 windows 的事。 虽然，Linux 在服务器行业炙手可热，但在桌面的行业 不温不火，原因为：1. Windows 够用了，够用就好了。 2. Linux 上软件和驱动不如 windows 多。后 PC 时代中，随着 Andorid 和嵌入式智能设备的流行，无数设备中运行的都是 Linux。 Mac OS 最早是 Macintson(麦金托) 机器上原装系统，随后一直演化，最纵演化为一头史前巨兽。后来，Apple 收购了 NeXT 之后，Apple 废弃原有巨兽 Mac OS，使用 NextStep 的 OS，推出了 Mac OSX。从此，MacOSX 整合了图形界面 + 命令行。 12拉斯金在自己的博士论文里写着，计算机应该是给人用的，不仅仅是给极客黑客各种客用的，除了神秘的命令行，还得有图形界面，所以他对世界宣布：“ Have a Dream，那就是为大众制造物美价廉的电脑。” Windows：实用理性主义 Linux：开源和狂热者的天堂，为自由而战 MacOSX: 科技与人文的结合 技巧 技巧：名词，指表现在文学、工艺、体育等方面的巧妙的技能,如“绘画技巧”；或者指技巧性的运动。如“技巧比赛”。 MacOSX 技巧 ，就是操作像 Mac 这样的计算机操作系统的快捷方式。 Aflerd 21 打开应用程序：Alfred 几乎是一切程序的入口。用快捷键呼出 Alfred，输入任何一款应用程序的中文或英文名称，即可快速定位程序，回车打开。 2 简单查找文件：用快捷键呼出 Alfred，键入空格，输入你要查找文件名，即可定位文件，回车打开，command + 回车打开文件所在文件夹。 3 复杂操作文件：通过 find、open、in 等关键词搜索文件。find 是定位文件，open 是定位并打开文件，in 是在文件中进行全文检索，三种检索方式基本上可以找到任何你想找的文件。 4 直接当做计算器使用。 5 操作 Shell：输入 &gt; 即可直接运行 shell 命令。比如 &gt;cat *.py | grep print，可以直接打开终端并查找当前 py 文件中包含 print 的语句。 6 输入 iTunes，会出现一个 iTunes mini play，打开可以通过 Alfred 控制音乐播放。用快捷键也能完成这个功能：shift+option+command+p 7 输入 email，后面跟邮件地址，可以直接打开写邮件的界面 8 Alfred2 成熟的 workflow 插件机制 Homebrew HomeBrew 就是 MacOS 下最著名的包管理器，使用它的目的就是让 MacOS 下的命令行和 Linux 下一样顺手。 基本操作12345678# 安装brew install &lt;formula&gt;# 搜索brew search vibrew search /正则表达式/ # 标准格式brew search /^vi/ #规定了只能是vi开头 使用homebrew安装原本需要图形安装的软件比如chrome。 1brew cask install &lt;formula&gt; 一般来说不带任何选项的话，homebrew 会优先下载二进制，二进制下载不到就会尝试从源码编译。 123brew info &lt;formula&gt; #查看这个包的信息，从中我们可以得知有哪些选项可选。#示例brew install vim --HEAD --with-override-system-vi --with-lua oh-my-zshMacOSX 站在了图形界面和命令行的十字路口，谈到 Mac 技巧，就不能不提命令行和终端,终端软件: iTerm2 - 某上古终端的第二版，比自带的终端惊艳的多，也强大的多。shell: 从 sh 到 bash，再到 zsh,fish，最后 oh-my-zsh。 兼容 bash，和 bash 切换毫无压力。 强大的历史纪录功能，输入 grep 然后用上下箭头可以翻阅你执行的所有 grep 命令。 智能拼写纠正，输入 gtep mactalk * -R，系统会提示：zsh: correct ‘gtep’ to ‘grep’ [nyae]? 比妹纸贴心吧，她们向来都是让你猜的…… 智能跳转，安装了autojump之后，zsh 会自动记录你访问过的目录，通过 j + 目录名 可以直接进行目录跳转，而且目录名支持模糊匹配和自动补全，例如你访问过hadoop-1.0.0目录，输入j hado 即可正确跳转。j –stat 可以看你的历史路径库。 目录浏览和跳转：输入 d，即可列出你在这个会话里访问的目录列表，输入列表前的序号，即可直接跳转。 在当前目录下输入 .. 或 … ，或直接输入当前目录名都可以跳转，你甚至不再需要输入 cd 命令了。 Vim其他工具 curl,httpie aria2 tig you-get neovim htop 后记书籍推荐: MacTalk 人生元编程 快乐的命令行 硅谷革命 终极 Shell——ZSH macOS 有哪些常用的快捷键]]></content>
      <categories>
        <category>主题分享</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018日常]]></title>
    <url>%2Fpassages%2F2018-01-07-2018%E6%97%A5%E5%B8%B8%2F</url>
    <content type="text"><![CDATA[2018-01-07 hello 2018 2018-01-15 没有背景，没有爹妈支持的人，他的选择真的很少。所以真正的悲剧，是现在的一个假象：(看上去)什么选择都在，而逼到你面前的问题，就是你(其实)没有多少选择。—— 陈丹青《圆桌派》 2018-01-25 久违的雪，十几年没见过雪了，预想过很多下雪的场景，现如今且一点玩赏的意念都没有了。 2018-01-31 漫图摄影公司年会，别人恣意张扬，色彩斑斓的青春，让自己的更显苍白，好像自己的青春一直在缺席，从未来过。只能不断追悔，年纪越来越大不可能再疯狂了。如果不再把自己所剩无几的美好时光，倾注于某个事业，真的会浪费大好青春。不能让日益稀薄的头发白白掉落。我相信终于那一天，我能勇于去追寻自己渴望的东西。 2018-04-06 一个人压抑久了，连哭都会忘记，只会干笑了。 2018-04-08 “小时候以为坚持就是永不动摇，长大后才明白，坚持是犹豫着、退缩着、挣扎着，但还在继续往前走 。” 2018-04-09 别留恋，别恐惧. 2018-04-11 “成功的关键在于，既知道如何努力追求很多东西，也知道如何“正确地失败”——能够在经历失败的痛苦过程中吸取重要的教训，从而避免被踢出局（错误的失败）。”, “人要变得特别成功需要看到很多东西，但任何人都看不到全景，只是有的人看的到多一些。自身视野宽阔，又能与其他聪明人良好地沟通，了解他们不同的有益视角，这样的人才会做得最好。” 2018-04-12 「这些年我一直提醒自己一件事情，千万不要自己感动自己。大部分人看似的努力，不过是愚蠢导致的。什么熬夜看书到天亮，连续几天只睡几小时，多久没放假了，如果这些东西也值得夸耀，那么富士康流水线上任何一个人都比你努力多了。人难免天生有自怜的情绪，唯有时刻保持清醒，才能看清真正的价值在哪里。」———By于宙.《我们这一代人的困惑》 2018-04-15 走的异常艰难。 2018-04-16 你是怎么样的人，就会发生怎样的故事，认认真真生活，该发生的就会发生。 2018-04-25 穷小子如何逆袭。 2018-05-01 清醒一点吧，李忠义 2018-06-04 “和所有那些不想睡觉的人一起待着，和所有那些夜晚需要一盏灯的人待在一起。” 2018-06-24 我应该要学会愤怒,这样别人才会看到你的想法。 2018-07-10 开了一个公众号，尝试去写一些有质量的文章。 2018-09-02 没有那么多的爱，是为了了无牵挂。 2018-10-13 什么是真实？你看到什么，听到什么，做什么，和谁在一起，如果有一种从心灵深处满溢出来的，不懊悔也不羞耻的，平和与喜悦，那就是真实。 2018-10-16 好丧，好丧，好丧……]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一切都是那么糟]]></title>
    <url>%2Fpassages%2F2018-01-02-%E4%B8%80%E5%88%87%E9%83%BD%E6%98%AF%E9%82%A3%E4%B9%88%E7%B3%9F%2F</url>
    <content type="text"><![CDATA[过去的 2017 年，可能是我经历的人生中最多疑惑，糟糕的一年。工作的沉闷打击，生活的不如意，计划的破碎…，这一切深深扼止着我发声的念头，用沉默和隐忍来伪装着自己什么都不在乎，逃避着它们带来的伤害。 工作离开深圳这个不是什么艰难的决定，但是这个想法在距离离开时间越近的时候，越愈发的影响我的情绪了，自己可能将远离此地再不回来，才第一次察觉我对它并非全无感情。没能在这座城市里留下份美好的记忆，是一个胜利者的姿态离开，反而是在这个没有自己任何眷恋的城市里，作为一个逃荒者，狼狈失败的离开。我也相信留在这里，会等待到我期待地，美好地，能让我值得守护，追寻的东西；但我选择了离开，是因为在别处我看到了我要找寻的人了，从那城市发出的光是那么真切，平淡，且遥不可及。这不是我唯一的希冀，是离开的理由。 上海3 月份的上海，空气凛冽，感受到从未有过的严寒。那段时间自己心情是复杂的，不停得投着简历，希望能以后能出入在这座陌生城市的某栋 CBD 写字楼里，又害怕真的留在了这我做好准备的城市了。每每面试结束，都会选择去附近公园，景区逗留，看着这座城市渐渐暮色四起，慢慢暗下去，人群开始变得焦躁。面试结果，大多数是挫败居多，让我看到很多只是自己以前是理解的多么粗浅。面试问过最多的问题是：为什么来上海？我都是回复说：想来看看。真实理由是逃离，也不想编理由来塞搪他们。我喜欢这里吗？这里有高速的节奏，眼花缭乱的选择，自己的追求在这面前，变得是那么简单，关于现状，关于未来，自己是很安分的人，安分的有点庸俗，朝九晚五的工作，下班没有工作的困扰，看电影，和朋友聚聚，能活着，没有烦恼和顾虑。 杭州没做过多考虑就入职了杭州目睹科技公司，毕竟这里是预期的城市。嘈杂的氛围，不舒适的行业，让我长期无意识的抵触开始苏醒，开始出现畸形心态，希望自己能快点再快点，能更快的看到自己进入新的阶段，急于看到结果，渴望被看到。离职，又离职，被离职，经历了很黑暗的时期。在生活给我这个猝不及防耳光后，现在对事业的渴望程度已经减弱，恐惧颠簸和潮起潮落。目前这个工作，高强度的节奏，让我无暇目及其他，也错是个好事。把一切都当作全新的，一切都等着我去重新打开。 生活电影提及电影，其实关于的是她。2017 年里唯一能让自己高兴的事，就是阔别一年又能和她见面了。对待感情自己是个克制的人，从不敢在有的情绪里表达了不敢有的文字，这些情绪无处盛放的时候，就找看过得电影来看，不断快进，跳跃，消磨着。经常会想我们间微小的事情,彼此突然沉默,找不到衔接的话语，我一直都在试着改变，却怎么也改变不了。每个人都是会说很多道理的，而恰恰我是属于不会说的那种。可能我心里会思考着很多的道理，但我说不出来，有时也写不出来。也可能是我的生活里可以留给彼此展示的东西太少，讲的太生活显得自己过的平庸。她说我做事太过认真，其实我明白她想表达的深层意思，一份感情，太多因素，这是完全超出自己操控范围的，它容不下一个理想化的我。自己是个敏感的人，很多话即时对方不说出来，我也自己该做什么决定才是正确得。想真心走进一个人谈何容易，每一个人都在坚守着自己那片骄傲的孤岛，但我并不想停止分享我的这份热爱，和执着。 2018今年的年末我过得特别的平静，内心再也没有了蠢蠢欲动的新年狂热，更多的是平静。2017 的最后一天，选择去影院看部电影，以电影结束这年。我一个人站在霓虹灯璀璨，冷风刺骨，满城喧嚣里，落寞地想到：2017年，她真的就离开了，2018 年，就这么不可抗拒地来了。我知道，我什么都抓不住。我只是一个迷失了的孩子，站在时间的渡口，迎来送往。 拼命学 不再封闭自己 努力产出 杜绝无效的电影&amp;书 放下执念的东西 我愿，我的一生，不会变成一次虚无的旅程。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Buffalo 框架初体验]]></title>
    <url>%2Fpassages%2F2017-12-18-Buffalo%20%E6%A1%86%E6%9E%B6%E5%87%BA%E4%BD%93%E9%AA%8C%2F</url>
    <content type="text"><![CDATA[Buffalo 框架 Buffalo 是 web 生态系统. 它的设计简化了 Web 开发的复杂度. Buffalo 不仅生成前端（JS、SCSS），还生成后端（路由、数据库），并提供易用 API 快速建立站点。Buffalo 并不是一个类库，而是一个开发环境或者说是项目结构，可以让开发者直接关注于项目的创建。 Buffalo 不仅仅是一个框架，它是一个整体的 Web 开发环境和项目结构，可以让开发人员直接从事业务，也就是构建业务。 Installation $ go get -u -v github.com/gobuffalo/buffalo/buffalo 官网http://gobuffalo.io]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis 分享]]></title>
    <url>%2Fpassages%2F2017-12-3-Redis%E5%88%86%E4%BA%AB%2F</url>
    <content type="text"><![CDATA[Redis 基础分享 这次和大家分享的主要是 Redis 的数据结构和及其应用场景相关内容，希望对大家学习有所帮助。 Redis 是什么Redis 是一个开源的、使用C语言编写的、支持网络交互的、可基于内存也可持久化的Key-Value数据库。Redis 数据库中的所有数据都存储在内存中。由于内存的读写速度远快于硬盘，因此 Redis 在性能上对比其他基于硬盘存储的数据库有非常明显的优势，在一台普通的笔记本电脑上，Redis 可以在一秒内读写超过十万个键值。 123Redis 开创了一种新的数据存储思路，使用 Redis，我们不用在面对功能单调的数据库时，把精力放在如何把大象放进冰箱这样的问题上， 而是利用 Redis 灵活多变的数据结构和数据操作， 为不同的大象构建不同的冰箱。希望你喜欢这个比喻。 ----- antirez Redis 特性1.存储结构Redis 它以字典结构存储数据，同大多数语言中的字典一样，Redis 字典中的键值除了可以是字符串，还可以是其他数据类型。到目前为止 Redis 支持的键值数据类型如下 字符串类型 散列类型 列表类型 集合类型 有序集合类型 这种字典形式的存储结构与常见的 MySQL 等关系数据库的二维表形式的存储结构有很大的差异。 2.持久化Redis 虽然是一种内存型数据库，一旦服务器进程退出，数据库的数据就会丢失，为了解决这个问题 Redis 提供了两种持久化的方案，将内存中的数据保存到磁盘中，避免数据的丢失。 Redis 提供了多种不同级别的持久化方式： RDB 持久化可以在指定的时间间隔内生成数据集的时间点快照。 AOF 持久化记录服务器执行的所有写操作命令，并在服务器启动时，通过重新执行这些命令来还原数据集。 3.原子性原子性:一个事务是一个不可分割的最小工作单位,要么都成功要么都失败。单个 Redis 命令的执行是原子性的，Redis 事务的执行并也是原子性的,事务中的命令要么全部被执行，要么全部都不执行。 使用场景1.字符串类型可以用它存储临时，全局共享复用，可以实时获取的数据，也可以存储多属性的对象,需要将其序列化后使用一个字符串类型键存储，但这种方法无法提供单个字段的原子读写操作支持，从而产生竞争。INCR指令本身就具有原子操作的特性，可以利用 redis 的 INCR、INCRBY、DECR、DECRBY等指令来实现原子计数的效果。 12345678127.0.0.1:6379&gt; set str 'Hello world'OK127.0.0.1:6379&gt; get str"Hello world"127.0.0.1:6379&gt; set num "2"OK127.0.0.1:6379&gt; incr num(integer) 3 当 key 不存在时，返回 nil ，否则，返回 key 的值。 如果 key 不是字符串类型，那么返回一个错误。 散列类型存储多属性的对象时，散列类型更适合这个场景，这方法比起字符串更加直观，也更容易维护，存储同样的数据，散列类型比字符串类型更加节约空间。 1234567127.0.0.1:6379&gt; HMSET post title "redis tutorial" description "redis basic commands"OK127.0.0.1:6379&gt; HGETALL post1) "title"2) "redis tutorial"3) "description"4) "redis basic commands" 列表类型列表类型可以存储一个有序的字符串列表，常用的操作是向列表两端添加元素，或者获取列表的某一片段。可以利用 list 类型实现的功能：实现先进先出队列以及栈,队列在 web 应用的范围非常广，比如日志推送、任务处理等等。 123456789101112127.0.0.1:6379&gt; lpush mylist "1"(integer) 1127.0.0.1:6379&gt; rpush mylist "2"(integer) 2127.0.0.1:6379&gt; lpush mylist "0"(integer) 3127.0.0.1:6379&gt; LINDEX mylist 2"2"127.0.0.1:6379&gt; LINDEX mylist 1"1"127.0.0.1:6379&gt; LINDEX mylist 0"0" redis 中的 lists 在底层实现是双向链表，也就是说对于一个具有上百万个元素的 lists 来说，在头部和尾部插入一个新元素，其时间复杂度是常数级别的，比如用 LPUSH 在10个元素的 lists 头部插入新元素，和在上千万元素的 lists 头部插入新元素的速度应该是相同的。 集合类型集合类型常用操作是向集合中加入或删除元素，判断某个元素是否存在等，在 Redis 提供的 Sets 数据结构，可以存储一些集合性的数据，比如在微博应用中，可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。Redis 还为集合提供了求交集、并集、差集等操作，可以非常方便的实现如共同关注、共同喜好、二度好友等功能。 123456789101112131415161718192021127.0.0.1:6379&gt; sadd myset "one"(integer) 1127.0.0.1:6379&gt; sadd myset "two"(integer) 1127.0.0.1:6379&gt; smembers myset1) "two"2) "one"127.0.0.1:6379&gt; sismember myset "one"(integer) 1127.0.0.1:6379&gt; sadd yourset "1"(integer) 1127.0.0.1:6379&gt; sadd yourset "2"(integer) 1127.0.0.1:6379&gt; smembers yourset1) "1"2) "2"127.0.0.1:6379&gt; sunion myset yourset1) "two"2) "2"3) "one"4) "1" redis 中的集合类型在底层实现是空的散列实现的。 有序集合类型和集合类型相比，有序集合类型增加了一个权重参数 score，使得集合中的元素能够按 score 进行有序排列。 123456789101112131415127.0.0.1:6379&gt; ZADD w3ckey 1 redis(integer) 1127.0.0.1:6379&gt; ZADD w3ckey 2 mongodb(integer) 1127.0.0.1:6379&gt; ZADD w3ckey 3 mysql(integer) 1127.0.0.1:6379&gt; ZADD w3ckey 4 mysql(integer) 0127.0.0.1:6379&gt; ZRANGE w3ckey 0 10 WITHSCORES1) "redis"2) "1"3) "mongodb"4) "2"5) "mysql"6) "4" 有序集合类型使用散列表和跳跃表(skip list)实现,即时是读取中间部分的数据速度也很快，可以更改元素分数，调整元素位置。 发布订阅模式 Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。在 Redis 中，你可以设定对某一个 key 值进行消息发布及消息订阅，当一个 key 值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天，群聊等功能。 1234567891011127.0.0.1:6379&gt; SUBSCRIBE redisChatReading messages... (press Ctrl-C to quit)1) "subscribe"2) "redisChat"3) (integer) 11) "message"2) "redisChat"3) "Hello World"1) "message"2) "redisChat"3) "Redis is a great caching technique" 12345127.0.0.1:6379&gt; PUBLISH redisChat "Hello World"(integer) 1127.0.0.1:6379&gt; PUBLISH redisChat "Redis is a great caching technique"(integer) 1127.0.0.1:6379&gt; 发布/订阅模式定义了一种一对多的依赖关系，让多个订阅者对象同时监听某一个主题对象。这个主题对象在自身状态变化时，会通知所有订阅者对象，使它们能够自动更新自己的状态。 优势 降低了模块间的耦合度：发布者与订阅者松散地耦合，并且不需要知道对方的存在。相关操作都集中在 Publisher 中。 可扩展性强：系统复杂后，可以把消息订阅和分发机制单独作为一个模块来实现，增加新特性以满足需求 缺陷 发布者不知道订阅者是否收到发布的消息 订阅者不知道自己是否收到了发布者发出的所有消息 发送者不能获知订阅者的执行情况 没人知道订阅者何时开始收到消息 资料 Redis 中文文档 Redis 设计与实现 Predis 后记善用文档]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【译】Rails 集成第三方 API]]></title>
    <url>%2Fpassages%2F2017-10-23-Integrating%20a%20Third%20Party%20API%20with%20Rails%205%2F</url>
    <content type="text"><![CDATA[在搭建自己网站的时候，总会遇到集成第三方应用的时候，例如你不想自己收集数据，或者是要用到别人的服务。这文章将向您展示一个快速和简单的例子,如何使用API来填充应用程序用一些有用的数据。 构建 API 基础我非常喜欢做菜，所以决定通过做一个菜谱 app。我将使用通过 Mashape 提供的 Spoonacular API。这是 API 文档 链接, 构建 API 之前，我们需要申请一个 mashape 帐号，通过帐号生成 API token。 我们先创建一个 Rails 项目，添加我们接下来需要到的 GEM，dotenv-rails,能让我保存一些重要数据保存成环境变量，faraday, 简单,灵活的 HTTP 客户端。 12gem 'dotenv-rails'gem 'faraday' 新建两个类 Connection，Request，在 lib/spoonacular 文件夹下，这两个类是与第三方 API 建立连接，和请求用的。 123456789101112131415require 'faraday'require 'json'class Connection BASE = 'https://spoonacular-recipe-food-nutrition-v1.p.mashape.com' def self.api Faraday.new(url: BASE) do |faraday| faraday.response :logger faraday.adapter Faraday.default_adapter faraday.headers['Content-Type'] = 'application/json' faraday.headers['X-Mashape-Key'] = ENV['MASHAPE_KEY'] end endend 在 Connection 类里，定义了连接 API 的方法，和一些必须的配置文件。 1234567891011121314151617181920212223242526272829class Request class &lt;&lt; self def where(resource_path, query = &#123;&#125;, options = &#123;&#125;) response, status = get_json(resource_path, query) status == 200 ? response : errors(response) end def get(id) response, status = get_json(id) status == 200 ? response : errors(response) end def errors(response) error = &#123; errors: &#123; status: response["status"], message: response["message"] &#125; &#125; response.merge(error) end def get_json(root_path, query = &#123;&#125;) query_string = query.map&#123;|k,v| "#&#123;k&#125;=#&#123;v&#125;"&#125;.join("&amp;") path = query.empty?? root_path : "#&#123;root_path&#125;?#&#123;query_string&#125;" response = api.get(path) [JSON.parse(response.body), response.status] end def api Connection.api end endend Request 类负责 Spoonacular API 的实际请求，还定义了一些辅佐方法。 数据处理现在我们需要向 Spoonacular API 发出请求, 通过它的文档，我们需要设计自己数据结构。这个 APP 只是想简单罗列出食谱，食谱有很多成分，和说明。对于初学者，我们先创建一个 Spoonacular::Base 类，其中定义了错误属性和 initializaton method, 我建议把所有类放在 app/services/spoonacular 下。 123456789101112module Spoonacular class Base attr_accessor :errors def initialize(args = &#123;&#125;) args.each do |name, value| attr_name = name.to_s.underscore send("#&#123;attr_name&#125;=", value) if respond_to?("#&#123;attr_name&#125;=") end end endend 我们继续完善 Spoonacular API， 我们需要定义两条 routes, 一条是菜谱列表，另一个是菜谱详细信息。 12GET recipes/randomGET recipes/:id/information 正如你期望的，我们再创建 Spoonacular::Recipe 类，让它继承 Spoonacular::Base, 这个类有随机查找菜谱的的方法，我们还需要重新定义初始方法，以解析 HTTP 响应中的结构。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546module Spoonacular class Recipe &lt; Base attr_accessor :aggregate_likes, :dairy_free, :gluten_free, :id, :image, :ingredients, :instructions, :ready_in_minutes, :title, :vegan, :vegetarian MAX_LIMIT = 12 def self.random(query = &#123;&#125;) response = Request.where('recipes/random', query.merge(&#123; number: MAX_LIMIT &#125;)) recipes = response.fetch('recipes', []).map &#123; |recipe| Recipe.new(recipe) &#125; [ recipes, response[:errors] ] end def self.find(id) response = Request.get("recipes/#&#123;id&#125;/information") Recipe.new(response) end def initialize(args = &#123;&#125;) super(args) self.ingredients = parse_ingredients(args) self.instructions = parse_instructions(args) end def parse_ingredients(args = &#123;&#125;) args.fetch("extendedIngredients", []).map &#123; |ingredient| Ingredient.new(ingredient) &#125; end def parse_instructions(args = &#123;&#125;) instructions = args["analyzedInstructions"] if instructions steps = instructions.first.fetch("steps", []) steps.map &#123; |instruction| Instruction.new(instruction) &#125; end end endend 返回来响应体中，包含了每个菜谱配方，都会创建一个 Spoonacular::Recipe 对象， 和几个 Spoonacular::Lngredient, Spoonacular::Instruction 对象。 12345678910module Spoonacular class Ingredient &lt; Base attr_accessor :id, :image, :name, :amount, :unit, :original_string endend 12345module Spoonacular class Instruction &lt; Base attr_accessor :number, :step endend 最终构建应用我们搭建 WEB 界面。 如前所述，此界面将具有菜谱配方列表和菜谱配方详细信息。 因此，应该不难猜到我们需要为RecipesController 创建 index 和 show 页面： 12345678910111213141516class RecipesController &lt; ApplicationController def index @tag = query.fetch(:tags, 'all') @recipes, @errors = Spoonacular::Recipe.random(query) end def show @recipe = Spoonacular::Recipe.find(params[:id]) end private def query params.fetch(:query, &#123;&#125;) endend 原文 https://revs.runtime-revolution.com/integrating-a-third-party-api-with-rails-5-134f960ddbba]]></content>
      <categories>
        <category>翻译</category>
      </categories>
      <tags>
        <tag>翻译</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【译】4 Problems of Web Development-from Developer's perspective]]></title>
    <url>%2Fpassages%2F2017-10-16-4%20Problems%20of%20Web%20Development-from%20Developer's%20perspective%2F</url>
    <content type="text"><![CDATA[我们总会在重复的任务中感到无聊。当前的技术或许已经过时，或者缺乏创新。但我们仍需要选择更合适的开发工具，用更聪明的方法，浏览器还是在首要地位。 问题当 web 开发者每天坐在电脑前，缓慢得在 Darcula 主题的文本编辑器上输入代码的时候，显示器的亮光并不会给我们如何构建网站带来灵光。 1 厌倦Web 开发者职业初期可能都是 form,grid,modal dialog 这些基础的东西，当新的热门技术来，你可能用它又构建之前相同的东西，虽然技术是不同，但实质上没什么改变。 这问题是我们感到厌倦，在同样地事情上做了一遍又一遍。我们想要做新意一点得，我们仍热爱着我们的事业，渴望能摆脱这种厌倦的境地，能专注于具有挑战和令人兴奋的东西。很不幸，今天在这里我不是解决这个问题，至少现在不是，但我在这一步上有了方向。 不要因为我说的厌倦的场景，而去讨厌自己工作，这不是我想传达的意思，你可能很爱你的公司，和你当前正在创建的产品，但你一定会想逃避那无聊的部分，直接去参与那有趣的部分。构建登录表单，条列商品，文件上传这重复性的任务，可能已经做过很多次了，你可能想能去做那富于挑战的部分，热狗识别机器学习等 2 现有方案当你准备开始构建一个 Web 应用，你做完所有的规范工作后，就需要决定用哪些技术的发展。无论你什么时候开始，第一件事就是决定你的语言偏好，你不会再想重构它一遍。这就像搭建一个房子时候，初期的挖泥，制砖。 使用框架你不要去使用原始的方法，尽量去用成熟的框架，和库。这是很方便的，你能得到很多便利，你仅仅需要链接服务端框架，它会和 UI 前端框架一起工作，你还需要创建身份认证层，连接所有服务，API 层，定义你项目的文件，模块，webpack 配置，然后再优化你的代码，使其运行更快，编译的更小。因为你丢失了几个组件，你需要额外添加 jQuery 库，它只是会增加了你站点的一点加载时间。我想说不仅仅是这些。 CMS 比框架更好如果你已经使用框架开发很长时间了，知道了这方法是很耗时，如果项目是一个固定费用的项目，你将会花费很多时间在调试，查找缺省，优化代码上，它会花费掉很多额外开销。 众所周知使用一个现成的CMS。 由于它具有所有您需要的大多数功能，因此在服务器端以及客户端都可以直接使用。 但是大多数开发人员无法理解的是，CMS是为单一目的设计的，它通常看起来像：Page &gt; New Page &gt; Save Page &gt; Publish. 你可以构建自定义模块，但是经常会花更多的时间来处理 CMS 所带来的 bug 和局限性，所以你的代码可以按照你想要的方式工作。更不用说这些事情会更新一下。 总结：向 CMS 添加自定义模块,会破坏原来的代码的整体性，还带来了隐患。 不可知设备数据层, 大多数人采取框架，然后坚持用 HTML 编辑器，所以用户可以创建页面。 而且大部分的 CMS 都已经内置了 HTML 编辑器，因为它们的目的是在浏览器中呈现一个页面，并且这个工作正常。 但是当您需要在移动应用程序，电视或控制台应用程序上显示时，您必须为此建立特殊的API，以及使用Web视图来显示内容，因为其中包含HTML。 现在问题是,数据是以设备不可知的方式进行管理。 你后台系统不应该考虑,总是会有一个 Web 浏览器来显示它。 今天所有系统必须具有100％的 API 覆盖率，以便与移动应用和其他设备正确集成。 数据需要”组件”。 假设有一个产品描述需求，其中包含一段文字和图像。 段落和图像需要是组件，而不是HTML标签。 通过这种方式，其他设备可以回收一个概念，您可以使用设备上的本机控制器来显示它。 在浏览器中，它将是一个标签和标签，在iOS上可能是UILabel和UIImage类。 你不是用补丁方式使事情兼容。 Web 开发的石器时代当代我们有了汽车， 有了比人类大脑更强大的机器人，机器人可以行走和能和环境的互动，但在 Web 开发中，我们仍然是在创建一个工作的下拉菜单能在页面中垂直对齐的图像。 你可能会认为这些问题是有趣的，但是我们作为 Web 开发人员与它们一直在斗争，它们一遍又一遍地和它们浪费时间。 这是一个很大的问题，它已经是一个很多年的问题，还没有完全解决。 令人遗憾的是，像 ReactJs 这样的技术现在可以让我们选择,可以构建,可以扩展,完美的合适的组件。在我看来，这是一个将 Web 发展彻底改革成青铜时代的平台，但下一步是什么呢？ 我们需要进一步改进组件，让它们自动知道如何在组件间进行交互，底层平台自动化我们90％的工作，消除了我们之前所花费的时间和面临的所有和错误，而我们 Web 开发人员有更多的时间专注于机器无法解决的具有挑战性的问题 - 至少尚未解决的问题。 这将是 Web 开发的现代时代.]]></content>
      <categories>
        <category>翻译</category>
      </categories>
      <tags>
        <tag>翻译</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[logrotate 归档log]]></title>
    <url>%2Fpassages%2F2017-09-29-logrotate%20%E5%BD%92%E6%A1%A3log%2F</url>
    <content type="text"><![CDATA[logrotate是linux下的一个服务。它可以自动对日志进行截断（或轮循）、压缩以及删除旧的日志文件。 logrotate 配置文件配置文件路径 /etc/logrotate.d,在目录创建配置文件. 12345678910/www/project/shared/log/production.log &#123; weekly rotate 12 missingok notifempty compress dateext delaycompress copytruncate&#125; Cron 定时任务语法 1234567- – – – -| | | | || | | | +—– Day of week (0–6) (Sunday=0) or Sun, Mon, Tue,…| | | +———- Month (1–12) or Jan, Feb,…| | +————-— Day of month (1–31)| +——————– Hour (0–23)+————————- Minute (0–59) cron 轮询例子 12# /usr/sbin/logrotate -f /etc/logrotate.d/nginx // 未到时间或者未到切割条件，强制切割# /usr/sbin/logrotate -d -f /etc/logrotate.d/nginx // 输出切割debug信息 查看正在进行的 logrotate cat /var/lib/logrotate/status. 参考资料 http://www.jianshu.com/p/ea7c2363639c http://www.jianshu.com/p/0137db63b91d]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker 入门学习]]></title>
    <url>%2Fpassages%2F2017-07-23-Docker%20%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[Docker 的基本概念： 镜像(Image) 容器(Container) 仓库(Repository) 用户权限123sudo groupadd docker # 增加 docker 用户组sudo gpasswd -a $&#123;USER&#125; docker # 当前用户加入 dockersudo service docker restart # 重启 docker 镜像 Docker Hub 仓库下载一个 Ubuntu 14.04 操作系统的镜像 12docker pull ubuntu:14.04docker pull dl.dockerpool.com:5000/ubuntu:12.04 #指定服务器地址 列出镜像 1docker images 通过镜像启动容器 1docker run -t -i training/sinatra /bin/bash 修改容器，提交更新后的副本 1docker commit -m &apos;Added json gem&apos; -a &apos;Docker Newbee&apos; 44ced85d1270 andrew/sinatra:v2 -m 用来指定提交的说明信息-a 指定更新的用户信息44ced85d1270 是容器的 IDandrew/sinatra:v2 是仓库名以及 tag 信息 移除镜像 1docker rmi training/sinatra 清理所有未打标签的镜像 12docker rmi $(docker images -q -f &quot;dangling=true&quot;)# docker rmi $(docker images --quiet --filter &quot;dangling=true&quot; # 完整命令 不能连接 https://index.docker.io12docker-machine restart default # Restart the environmenteval $(docker-machine env default) # Refresh your environment settings 利用 Dockerfile 来创建镜像 容器1docker run -t -i ubuntu:14.04 /bin/bash -t 选项让 Docker 分配一个伪终端(pseudo-tty)并绑定到容器的标准输入 上-i 则让容器的标准输入保持打开 当利用 docker run 来创建容器时,Docker 在后台运行的标准操作包括: 检查本地是否存在指定的镜像,不存在就从公有仓库下载 利用镜像创建并启动一个容器 分配一个文件系统,并在只读的镜像层外面挂载一层可读写层 从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去 从地址池配置一个 ip 地址给容器 执行用户指定的应用程序 执行完毕后容器被终止 1$ docker run -d ubuntu:14.04 /bin/sh -c "while true; do echo 会在后台运行并不会把输出的结果(STDOUT)打印到宿主机上面(输出结果 可以用 docker logs 查看) 进入容器1 bashrc_docker 1234wget -P ~ https://github.com/yeasy/docker_practice/raw/master/_local/.bashrc_docker;echo "[ -f ~/.bashrc_docker ] &amp;&amp; . ~/.bashrc_docker" &gt;&gt; ~/.bashrc; source ~/.bashrcdocker-enter &lt;容器id&gt; 2 nsenter 1234$ docker inspect -f &#123;&#123;.State.Pid&#125;&#125; b62a42c75ce225234nsenter --target 25234 --mount --uts --ipc --net --pid 3 exec, 这个简单好用 12$ docker exec -it 316f9f5ee7c9 /bin/bashroot@316f9f5ee7c9:/srv/rorapps/rmovie# bash --login 导出容器docker export 导出容器快照到本地文件 1234$ docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES7691a814370e ubuntu:14.04 "/bin/bash" 36 hours ago Exited (0) 21 hours ago test$ docker export 7691a814370e &gt; ubuntu.tar 导入容器使用 docker import 从容器快照文件中再导入为镜像 1234$ cat ubuntu.tar | docker import - test/ubuntu:v1.0$ docker imagesREPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZEtest/ubuntu v1.0 9d37a6082e97 About a minute ago 171.3 MB 清除容器清理所有处于终止状态的容器 1docker rm $(docker ps -a -q) 删除容器docker rm 来删除一个处于终止状态的容器 网络配置网络端口映射1docker run -d -p 127.0.0.1::5000 training/webapp python app.py 绑定端口 5000 容器动态端口，并且让 localhost 访问 仓库仓库（Repository）是集中存放镜像的地方 登录可以通过执行 docker login 命令来输入用户名、密码和邮箱来完成注册和登录。 注册成功后，本地用户目录的 .dockercfg 中将保存用户的认证信息。 基本操作1234docker search centos # 搜索镜像docker pull centos # 下载官方镜像到本地docker push andrewzhyl/rmovie_base:v1 # 上传镜像到公共仓库 Docker Hubdocker tag IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG] # 标记镜像，复制一份 数据管理容器中管理数据主要有两种方式: 数据卷（Data volumes） 数据卷容器（Data volume containers） 数据卷删除数据卷 数据卷是被设计用来持久化数据的，它的生命周期独立于容器 删除容器的时候使用 docker rm -v 才会删除数据卷，不然不会删除 Docker 挂载数据卷的默认权限是读写，用户也可以通过 :ro 指定为只读 12$ docker run -d -P --name web -v /src/webapp:/opt/webapp:rotraining/webapp python app.py 挂载一个主机目录作为数据卷1docker run -itd -P --name web -v /home/zhangyulong/rmovie_dev/gems:/srv/rorapps/gems rmovie_dev:v1 /bin/bash 挂在主机的 gems 作为 rmovie_dev 的数据卷 查看数据卷的具体信息在主机里使用以下命令可以查看指定容器的信息: 1docker inspect web 123456789"Mounts": [ &#123; "Source": "/home/zhangyulong/rmovie_dev/gems", "Destination": "/srv/rorapps/gems", "Mode": "", "RW": true, "Propagation": "rprivate" &#125; ], 挂载一个本地主机文件作为数据卷-v 标记也可以从主机挂载单个文件到容器中 1$docker run --rm -it -v ~/.bash_history:/.bash_history ubuntu /bin/bash 这样就可以记录在容器输入过的命令了。 数据卷容器持续更新的数据需要在容器之间共享，最好创建数据卷容器 创建 dbdata 数据卷容器 1docker run -d -v /dbdata --name dbdata training/postgres echo Data-only container for postgres 使用 –volumes-from 来挂载 dbdata 容器中的数据卷 1docker run -d --volumes-from dbdata --name db1 training/postgres 然后用 docker inspect db1 查看容器信息 1234567891011&quot;Mounts&quot;: [ &#123; &quot;Name&quot;: &quot;04d67060f52ffb5d7604d90f0e453f347dc7b002414a5c3283adf33be9a99d5c&quot;, &quot;Source&quot;: &quot;/var/lib/docker/volumes/04d67060f52ffb5d7604d90f0e453f347dc7b002414a5c3283adf33be9a99d5c/_data&quot;, &quot;Destination&quot;: &quot;/dbdata&quot;, &quot;Driver&quot;: &quot;local&quot;, &quot;Mode&quot;: &quot;&quot;, &quot;RW&quot;: true, &quot;Propagation&quot;: &quot;&quot; &#125; ], 使用 –volumes-from 参数所挂载数据卷的容器自己并不需要保持在运行状态 使用网络Docker 允许通过外部访问容器或容器互联的方式来提供网络服务。 外部访问容器使用 -P 标记时，Docker 会随机映射一个 49000~49900 的端口到内部容器开放的网络端口。本地主机的 49155 被映射到了容器的 5000 端口。此时访问本机的 49155 端口即可访问容器内 5000 端口 1234$ docker run -d -P training/webapp python app.py$ docker ps -lCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESbc533791f3f5 training/webapp:latest python app.py 5 seconds ago Up 2 seconds 0.0.0.0:49155-&gt;5000/tcp nostalgic_morse 查看日志: 1docker logs -f condescending_goldwasser 映射所有接口地址使用 hostPort:containerPort 格式本地的 5433 端口映射到容器的 5432 端口，可以执行: 1docker run -it -p 5433:5432 --name rmovie_db_dev rmovie_db_dev:9.4 映射到指定地址的指定端口可以使用 ip:hostPort:containerPort格式指定映射使用一个特定地址，比如 localhost 地址 127.0.0.1: 1docker run -it -p 127.0.0.1:5433:5432 --name rmovie_db_dev rmovie_db_dev:9.4 映射到指定地址的任意端口使用 ip::containerPort 绑定 localhost 的任意端口到容器的 5000 端口，本地主机会自动分配一个端口。 1docker run -it -p 127.0.0.1::5432 --name rmovie_db_dev rmovie_db_dev:9.4 还可以使用 udp 标记来指定 udp 端口: 1$ docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py 查看端口映射docker port 来查看当前映射的端口配置: 12 docker port condescending_goldwasser 54320.0.0.0:5433 容器有自己的内部网络和 ip 地址（使用 docker inspect 可以获取所有的变量，Docker 还可以有一个可变的网络配置。） -p 标记可以多次使用来绑定多个端口 容器互联 容器的连接（linking）系统是除了端口映射外，另一种跟容器中应用交互的方式。 该系统会在源和接收容器之间创建一个隧道，接收容器可以看到源容器指定的信息。 自定义容器命名--name 标记可以为容器自定义命名: 1docker run -itd -p 5433:5432 --name rmovie_db_dev rmovie_db_dev:9.4 docker inspect 来查看容器的名字: 1docker inspect -f "&#123;&#123; .Name &#125;&#125;" aed84ee21bde 创建一个数据容器，通过 -v 制定主机目录挂载到: 1docker run -v /home/zhangyulong/pgdata:/data --name dbdata postgres:9.4 echo "Data-only container for postgres" 容器的名称是唯一的 在执行 docker run 的时候如果添加 –rm 标记，则容器在终止后会立刻删除 注意，–rm 和 -d 参数不能同时使用。 容器互联常用命令12docker rmi $(docker images -q -f "dangling=true")docker rm $(docker ps -a -q)]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Go包学习-net]]></title>
    <url>%2Fpassages%2F2017-07-18-Go%E5%8C%85%E5%AD%A6%E4%B9%A0-net%2F</url>
    <content type="text"><![CDATA[go net包提供可移植性的网络I/O接口，包括TCP/IP,UDP,域名解析和Unix域socket。 虽然net包提供了底层网络的原语访问，但大多数用户只需要Dial,Listen 和 Accept 函数提供基本接口，和以及相关Conn和Listener接口。 crypto/tls包提供了一样的接口和类似的Dial和Listen函数。 Interface ```12345678910111213141516171819&gt; Interface类型代表一个网络接口（系统与网络的一个接点）。包含接口索引到名字的映射，也包含接口的设备信息。```go//type Flags uintconst ( FlagUp Flags = 1 &lt;&lt; iota // 接口在活动状态 FlagBroadcast // 接口支持广播 FlagLoopback // 接口是环回的 FlagPointToPoint // 接口是点对点的 FlagMulticast // 接口支持组播)type Interface struct &#123; Index int // 索引，&gt;=1的整数 MTU int // 最大传输单元 Name string // 接口名，例如&quot;en0&quot;、&quot;lo0&quot;、&quot;eth0.100&quot; HardwareAddr HardwareAddr // HardwareAddr类型代表一个硬件地址,IEEE MAC-48、EUI-48或EUI-64格式 Flags Flags // 接口的属性，例如FlagUp、FlagLoopback、FlagMulticast&#125;(*Interface) Addrs```12345&gt;Addrs方法返回返回指定接口的address。```gofunc (ifi *Interface) Addrs() ([]Addr, error)Interfaces ```12345&gt;Interfaces返回该系统的网络接口列表。```gofunc Interfaces() ([]Interface, error)InterfaceAddrs```12345&gt;InterfaceAddrs返回该系统的网络接口的地址列表。```gofunc InterfaceAddrs() ([]Addr, error)IP```12345&gt;IP类型是代表单个IP地址的[]byte切片。本包的函数都可以接受4字节（IPv4）和16字节（IPv6）的切片作为输入。注意，IP地址是IPv4地址还是IPv6地址是语义上的属性，而不取决于切片的长度：16字节的切片也可以是IPv4地址。```gotype IP []byteIPv4(a, b, c, d byte) IP```1234&gt; ipv4返回一个ipv4地址格式（a.b.c.d)的地址，这是16-byte的### ```func ParseCIDR(s string) (IP, *IPNet, error) ParseCIDR将字符串s解析成一个ip地址和子网掩码的结构体中，其中字符串格式必须是IP地址和子网掩码的字符串，如：”192.168.100.1/24”或”2001:DB8::/48“等。 (ip IP) Equal(x IP) bool```1234&gt;判断两个ip地址是否相等，其中一个ipv4地址以及相同具有ipv6格式的相同的地址认为是相等的，返回true### ```func (ip IP) IsGlobalUnicast() bool 判断是否是全局单播地址 ParseIP```12345678910111213141516171819202122232425262728293031323334353637383940&gt; ParseIP将s解析为IP地址，并返回该地址。如果s不是合法的IP地址文本表示，ParseIP会返回nil。字符串可以是小数点分隔的IPv4格式（如&quot;74.125.19.99&quot;）或IPv6格式（如&quot;2001:4860:0:2001::68&quot;）格式。```gopackage mainimport ( &quot;fmt&quot; &quot;os&quot; &quot;net&quot;)func main() &#123; name := &quot;192.168.1.97&quot; ip := net.ParseIP(name) if ip == nil &#123; fmt.Fprintf(os.Stderr, &quot;Err:无效的地址&quot;) return &#125; fmt.Fprintf(os.Stdout, &quot;IP: %s %s\n&quot;, ip, ip.String()) defaultMask := ip.DefaultMask() //函数返回IP地址ip的默认子网掩码。只有IPv4有默认子网掩码；如果ip不是合法的IPv4地址，会返回nil。 fmt.Fprintf(os.Stdout, &quot;DefaultMask: %s %s\n&quot;, defaultMask, defaultMask.String()) ones, bits := defaultMask.Size() fmt.Fprintf(os.Stdout, &quot;ones: %d bits: %d\n&quot;, ones, bits) mask := ip.DefaultMask() network := ip.Mask(mask) fmt.Fprintf(os.Stdout, &quot;network: %s&quot;, network.String()) // 192.168.1.0&#125;// result IP: 192.168.1.97 192.168.1.97DefaultMask: ffffff00 ffffff00ones: 24 bits: 32network: 192.168.1.0%Dialer```1234567891011121314151617181920212223242526&gt; Dialer类型包含与某个地址建立连接时的参数。每一个字段的零值都等价于没有该字段。因此调用Dialer零值的Dial方法等价于调用Dial函数。```gotype Dialer struct &#123; // Timeout是dial操作等待连接建立的最大时长，默认值代表没有超时。 // 如果Deadline字段也被设置了，dial操作也可能更早失败。 // 不管有没有设置超时，操作系统都可能强制执行它的超时设置。 // 例如，TCP（系统）超时一般在3分钟左右。 Timeout time.Duration // Deadline是一个具体的时间点期限，超过该期限后，dial操作就会失败。 // 如果Timeout字段也被设置了，dial操作也可能更早失败。 // 零值表示没有期限，即遵守操作系统的超时设置。 Deadline time.Time // LocalAddr是dial一个地址时使用的本地地址。 // 该地址必须是与dial的网络相容的类型。 // 如果为nil，将会自动选择一个本地地址。 LocalAddr Addr // DualStack允许单次dial操作在网络类型为&quot;tcp&quot;， // 且目的地是一个主机名的DNS记录具有多个地址时， // 尝试建立多个IPv4和IPv6连接，并返回第一个建立的连接。 DualStack bool // KeepAlive指定一个活动的网络连接的生命周期；如果为0，会禁止keep-alive。 // 不支持keep-alive的网络连接会忽略本字段。 KeepAlive time.Duration&#125;Listener```123456789101112&gt;Listener是一个用于面向流的网络协议的公用的网络监听器接口。多个线程可能会同时调用一个Listener的方法。```gotype Listener interface &#123; // Addr返回该接口的网络地址 Addr() Addr // Accept等待并返回下一个连接到该接口的连接 Accept() (c Conn, err error) // Close关闭该接口，并使任何阻塞的Accept操作都会不再阻塞并返回错误。 Close() error&#125;FileListener(f *os.File) (l Listener, err error)```1234&gt; 返回对于文件f的网络listener的复制。### ```func Listen(net, laddr string) (Listener, error) 返回在一个本地网络地址laddr上监听的Listener。网络类型参数net必须是面向流的网络：”tcp”、”tcp4”、”tcp6”、”unix”或”unixpacket”。 Dial函数和服务器建立连接:1234567891011121314151617181920212223242526272829303132//server.gopackage mainimport ( "fmt" "log" "net" "bufio")func handleConnection(conn net.Conn) &#123; data, err := bufio.NewReader(conn).ReadString('\n') if err != nil &#123; log.Fatal("get client data error: ", err) &#125; fmt.Printf("%#v\n", data) fmt.Fprintf(conn, "hello client\n") conn.Close()&#125;func main() &#123; ln, err := net.Listen("tcp", "127.0.0.1:1080") if err != nil &#123; panic(err) &#125; for &#123; conn, err := ln.Accept() if err != nil &#123; log.Fatal("get client connection error: ", err) &#125; go handleConnection(conn) &#125;&#125; 123456789101112131415161718192021//client.gopackage mainimport ( "net" "bufio" "fmt")func main() &#123; conn, err := net.Dial("tcp", "127.0.0.1:1080") if err != nil &#123; panic(err) &#125; fmt.Fprintf(conn, "hello server\n") data, err := bufio.NewReader(conn).ReadString('\n') if err != nil &#123; panic(err) &#125; fmt.Printf("%#v\n", data)&#125; 12345$ run server.go "hello server\n"$ run client.go"hello client\n" IPAddr```1234&gt; IPAddr代表一个IP终端的地址。## ```func ResolveIPAddr ResolveIPAddr将addr作为一个格式为”host”或”ipv6-host%zone”的IP地址来解析。 函数会在参数net指定的网络类型上解析，net必须是”ip”、”ip4”或”ip6”。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546//func ResolveIPAddr(net, addr string) (*IPAddr, error)package mainimport ( "net" "fmt" "os" "io/ioutil")func main() &#123; url := "www.baidu.com:80" pRemoteTCPAddr, err := net.ResolveTCPAddr("tcp4", url) if err != nil &#123; fmt.Fprintf(os.Stderr, "Error: %s", err.Error()) return &#125; pTCPConn, err := net.DialTCP("tcp", nil/*pLocalTCPAddr*/, pRemoteTCPAddr) if err != nil &#123; fmt.Fprintf(os.Stderr, "Error: %s", err.Error()) return &#125; n, err := pTCPConn.Write([]byte("HEAD / HTTP/1.0\r\n\r\n")) if err != nil &#123; fmt.Fprintf(os.Stderr, "Error: %s", err.Error()) return &#125; defer pTCPConn.Close() fmt.Fprintf(os.Stdout, "writed: %d\n", n) buf, err := ioutil.ReadAll(pTCPConn) r := len(buf) fmt.Fprintf(os.Stdout, string(buf[:r])) fmt.Fprintf(os.Stdout, "readed: %d\n", r)&#125;//resultwrited: 19readed: 0 Error```123456789&gt; 实现了error接口中方法的结构体都实现了网络error```gotype Error interface &#123; error //错误 Timeout() bool // Is the error a timeout? 该错误是时间超时错误吗？ Temporary() bool // Is the error temporary? 这个错误是一个临时错误吗？ &#125;(e *AddrError) Error() string```1234&gt; 错误### ```func (e *AddrError) Temporary() bool 错误是否是一个临时错误 func (e *AddrError) Timeout() bool 错误是否是超时错误 参考 http://blog.csdn.net/chenbaoke/article/details/42782571 http://blog.csdn.net/chenbaoke/article/details/42782521 http://studygolang.com/articles/4186]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[沉默两年]]></title>
    <url>%2Fpassages%2F2017-06-30-%E6%B6%88%E5%A4%B1%E4%B8%A4%E5%B9%B4%2F</url>
    <content type="text"><![CDATA[这是很早就有的想法，把自己放逐到悬崖下，斩断自己的过往，然后看自己是否能嗜着血，脱胎换骨的归来。我知道自己再怎么努力，也逃脱不了平庸，但我要选择自己过活的方式，我爱的精彩生活。 想着用这么极端的方式，来让自己改变，其实也是因为自己无路可寻，面临着窒息般的困境。一直认为坦诚，比一味的掩盖有用。这也造成不会隐藏自己悲伤，失落情绪，习惯性拿出来，嘲笑自己的无能。也许是早已沉沦的心，自己再也不能苦苦坚持了。并不是在这萧条透顶的生活里，我承认了答案，更是我释怀了。我接受各色各样的人，但除了自己，不能原谅。 以下是未来两年的人生计划，立约至2018年末，期间不再改变心志。 爱情对于它我想写的很多，能说的且很少，对于它的态度，一直是且行且放，从不去刻意强求。在它面前我是扮演卑微角色的，有时候对它的扑面不清，过于执念的不愿停手，顿生很多苦恼，悲凉。这是一道难题，这么多人在里面找寻着最优解，自己怎么会是例外呢。我理解的爱情发生的没条件，自然而然不用奋力强求。用力过猛后的过程，它本质也在悄悄改变了。我的爱情应该是，在她面前能必须先剥落现实的污浊与昏暗，共同的对抗着现实的疼痛。我不仅仅是重新要开始新的自己，而是为了迎接遇到你。 个人1.在一个领域练习到专业程度目前自己求生手段，来自过去知识，能力。从长远来看，自己的知识，技能并不能一劳永逸。并没有自己擅长，精炼的方面。只有不断的练习，学习。尽可能认识所能接触到的优秀的人，认真从他们身上学习，扩展自己的认知，不能在一件工作任务上，只求结果，力强最大化掌握它的细枝末节，在工作不能甘心扮演碌碌为为，平庸的角色。技能是维持自己生计，减少为金钱的忧愁的途径。 2.减少自己无用的爱好过份的好奇心，让自己一天的时间裁剪的零碎，把无意义的坏习惯戒掉，游戏；不好看的电影及时关掉；远离IM。只在特定时间，做特定的事；只参加自己喜欢的社交活动。 3.健康 多学习医学知识，这不光是为了自己，也是为了家人考虑。科学，有规律的坚持锻炼。 戒烟 学习游泳 TODO 4.处事社交奢求变成一个玲珑，圆滑的人是不可能的，也是自己不愿看到的。但一定要成为一个情商高，懂说话的人。 面对一个人，主动打招呼，寒暄，力求不做作，不忸怩。 说话幽默，有趣 和别人对话不能带自己私自的情绪 学会说一下些场面话 5.长期坚持 看书，并作思考，写书感 自律 反省，写文字（系统的形成自己风格） 定期学习新的技能 6.生活方式安静的工作环境,保持自己和周边整洁，工作和生活保持平衡。 TODO]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[beego学习]]></title>
    <url>%2Fpassages%2F2017-05-26-beego%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[beego 一种MVC架构的web框架，网上评价:设计繁复。优点:简单，国人开人，文档，资料多。 orm 支持 Go 的所有类型存储 轻松上手，采用简单的 CRUD 风格 自动 Join 关联表 跨数据库兼容查询 允许直接使用 SQL 查询／映射 严格完整的测试保证 ORM 的稳定与健壮 1234567func init() &#123; // 注册数据库 orm.RegisterDataBase("default", "mysql", "root:root@/my_db?charset=utf8", 30)// 创建数据库，第三个参数是是否检测数据库重复，报错 orm.RunSyncdb("default", false, true)&#125; ORM 接口使用12345678 var o Ormer o = orm.NewOrm() // 创建一个 Ormer // NewOrm 的同时会执行 orm.BootStrap (整个 app 只执行一次)，用以验证模型之间的定义并缓存。 var r RawSeter r = o.Raw("UPDATE user SET name = ? WHERE name = ?", "testing", "slene") // Raw 函数，返回一个 RawSeter 用以对设置的 sql 语句和参数进行操作&#125; context 模块 上下文模块主要是针对 HTTP 请求中，request 和 response 的进一步封装，他包括用户的输入和输出，用户的输入即为 request，context 模块中提供了 Input 对象进行解析，用户的输出即为 response，context 模块中提供了 Output 对象进行输出。 golang strconv包 strconv实现与基本数据类型的字符串表示形式的转换 1234567891011121314151617181920212223242526272829303132 package main import ( "fmt" "strconv" ) func main() &#123; // ParseBool 将字符串转换为布尔值 fmt.Println(strconv.ParseBool("1")) // true fmt.Println(strconv.ParseBool("TRue")) // false strconv.ParseBool: parsing "TRue": invalid syntax fmt.Println(strconv.ParseBool("0")) // false fmt.Println(strconv.ParseBool("FALse")) // false strconv.ParseBool: parsing "FAlse": invalid syntax // FormatBool 将布尔值转换为字符串 "true" 或 "false" fmt.Println(strconv.FormatBool(0 &gt; 1)) // false // ParseInt 将字符串转换为 int 类型 // Atoi 相当于 ParseInt(s, 10, 0) // 通常使用这个函数，而不使用 ParseIn fmt.Println(strconv.Atoi("2147483647")) // 2147483647 fmt.Println(strconv.Atoi("2147483648")) // 2147483647 strconv.ParseInt: parsing "2147483648": value out of range // ParseFloat 将字符串转换为浮点数 s := "0.12345678901234567890" f, err := strconv.ParseFloat(s, 32) fmt.Println(f, err) // 0.12345679104328156 &#125; casbin casbin是一个用Go语言打造的轻量级开源访问控制框架，casbin采用了元模型的设计思想，支持多种经典的访问控制方案，如基于角色的访问控制RBAC、基于属性的访问控制ABAC等。 casbin的主要特性包括 支持自定义请求的格式，默认的请求格式为{subject, object, action}； 具有访问控制模型model和策略policy两个核心概念； 支持RBAC中的多层角色继承，不止主体可以有角色，资源也可以具有角色； 支持超级用户，如root或Administrator，超级用户可以不受授权策略的约束访问任意资源； 支持多种内置的操作符，如keyMatch，方便对路径式的资源进行管理，如/foo/**ar可以映射到/foo*； casbin不做的事情 身份认证authentication（即验证用户的用户名、密码），casbin只负责访问控制。应该有其他专门的组件负责身份认证，然后由casbin进行访问控制，二者是相互配合的关系； 管理用户列表或角色列表。casbin认为由项目自身来管理用户、角色列表更为合适，casbin假设所有策略和请求中出现的用户、角色、资源都是合法有效的。]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL笔记]]></title>
    <url>%2Fpassages%2F2017-04-10-SQL%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[SQL连接可以分为内连接、外连接、交叉连接。 内连接 等值连接：在连接条件中使用等于号(=)运算符比较被连接列的列值，其查询结果中列出被连接表中的所有列，包括其中的重复列。 不等值连接：在连接条件使用除等于运算符以外的其它比较运算符比较被连接的列的列值。这些运算符包括&gt;、&gt;=、&lt;=、&lt;、!&gt;、!&lt;和&lt;&gt;。 自然连接：在连接条件中使用等于(=)运算符比较被连接列的列值，但它使用选择列表指出查询结果集合中所包括的列，并删除连接表中的重复列。 1select * from book as a,stu as b where a.sutid = b.stuid select * from book as a inner join stu as b on a.sutid = b.stuid 外连接 左连接：是以左表为基准，将a.stuid = b.stuid的数据进行连接，然后将左表没有的对应项显示，右表的列为NULL 1select * from book as a left join stu as b on a.sutid = b.stuid 右连接：是以右表为基准，将a.stuid = b.stuid的数据进行连接，然以将右表没有的对应项显示，左表的列为NULL 1select * from book as a right join stu as b on a.sutid = b.stuid 全连接：完整外部联接返回左表和右表中的所有行。当某行在另一个表中没有匹配行时，则另一个表的选择列表列包含空值。如果表之间有匹配行，则整个结果集行包含基表的数据值。 1select * from book as a full outer join stu as b on a.sutid = b.stuid 交叉连接 交叉连接：交叉联接返回左表中的所有行，左表中的每一行与右表中的所有行组合。交叉联接也称作笛卡尔积。 1select * from book as a cross join stu as b order by a.id 子查询 子查询（Sub Query）或者说内查询（Inner Query），也可以称作嵌套查询（Nested Query），是一种嵌套在其他 SQL 查询的 WHERE 子句中的查询。 单行子查询 1select ename,deptno,sal from emp where deptno=(select deptno from dept where loc='NEW YORK')； 多行子查询 1select ename,job,sal FROM EMP WHERE deptno in ( SELECT deptno FROM dept WHERE dname LIKE 'A%')； 多列子查询 1SELECT deptno,ename,job,sal FROM EMP WHERE (deptno,sal) IN (SELECT deptno,MAX(sal) FROM EMP GROUP BY deptno)； 内联视图子查询 12SELECT ename,job,sal,rownum FROM (SELECT ename,job,sal FROM EMP ORDER BY sal)；SELECT ename,job,sal,rownum FROM ( SELECT ename,job,sal FROM EMP ORDER BY sal) WHERE rownum&lt;=5； 在HAVING子句中使用子查询 1SELECT deptno,job,AVG(sal) FROM EMP GROUP BY deptno,job HAVING AVG(sal)&gt;(SELECT sal FROM EMP WHERE ename='MARTIN')；]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2017日常]]></title>
    <url>%2Fpassages%2F2017-01-03-2017%E5%B9%B4%E6%97%A5%E5%B8%B8%2F</url>
    <content type="text"><![CDATA[2017-01-03 hello 2017 2017-04-11 我疯狂地阅读，电影、文字和目所能及的现实，却看不到自己。随心而动。心要往哪里去就让他也拉着我身体也一起过去，我认识到，这将会是适合我的生活方式。 然而问题在于，我的心，你到底想要往哪里去？又想去干什么？我把眼睛擦了又擦，我实在是看你不清。我和他唯一的默契是这样——他说“我困了，睡觉吧。”于是我便睡去。只有当我睡去我才感觉到你的归来。但醒着,我对你便是糊涂的。也许，随心而动是一种境界。这境界，我现在伸手还够不到。 2017-05-24 『破碎人生』是去年看过很喜欢的电影。影片开头来了个急刹车，妻子遭遇车祸去世，他麻木生活瞬间被截断，长期无意识、虚伪、敷衍、自私等，在医院看着妻子离去，他竟悲伤不起来，甚至有种旁观者的冷漠，挤不出一滴眼泪。 他开始回顾，妻子生前多次说他对身边人事漠不关心，于是开始关注细节，乘客的旅行箱里装的什么东西，家里漏水的冰箱，被暴风连根拔起的老树，厕所吱呀的门，出问题的电脑等等, 想起岳父说过的话：『如果你想修好一件东西，就先把它仔细拆开来，弄清楚最重要的是什么，什么能让你变得更坚强… 修复人的内心，就像维修汽车，先拆分和检查一切部件，然后再次组装起来』，”everything become metaphor”，他开始拆解厕所门、冰箱，电脑，拆解人生…最后戴维斯感受到真实的自由，拆解后的婚姻、生活是粗粝残破的，而他找到了最重要的部分：真实、自由，再拼凑起来。 2017-06-21 生活缓慢，沒有生气的进行着，我却只能目睹着，无力作出改变。想得太多，做的太少。 2017-06-21 花了一下午看了风云的博客，一边在感叹别人际遇的丰富，也在唏嘘人人之间的差距。自己黯淡，无生气的生活，拿什么故事去与别人分享。我也想很努力，但该从那个方向呢？我的故事该如何续写。风云博客链接 2017-06-22 下雨天的好处是，能为自己无所事事，找到了个恰当的理由，能在屋里闻泥土的气息。下雨天的坏处是，容易想念一个人，把心也弄得湿乎乎的。 2017-06-23 寂寞的流浪,一步一步走,人生还是要向前走。 2017-06-24 追完了&lt;权力的游戏&gt;,很吃力，很累，剧并不是很精彩值得认真看，但半途放弃让自己也不甘心。对中世纪西方骑士精神很崇拜，会为自己的一句许诺，不惜鞠躬尽瘁，终其一生只为自己的使命。反观现代人早以没有这种精神，对自己责任过于逃避，承担。 自己形象都管不好，还有什么能力掌控人生。看，生活，不就是一个不断用自己的手打自己的脸的过程么。我不敢想象这样下去的自己会成什么样，永远不要讨厌自己，那太残忍。亦不要推卸，是谁把我变成了现在这样。 2017-06-24 逃避可耻也没用。 2017-06-27 回家的路上，遇到了一个似曾相识的背影。我就这样在后面默默注视了一路。没有爱情的时候，就好好思考怎么挣钱。想到你会在未来的某天来提醒我这些细节，我的心就觉得温暖而饱满。 2017-06-28 要做一个有趣的人，我想我应该没做到了。很糟糕。我发现，我其实还是一个内心不错的人，乐于助人，以及，莫名其妙的愤慨。 2017-06-29 很惊喜，很尴尬的一天，感动于能和同事们过一个生日，羞愧自己不能说上一些有场面的话。 2017-06-30 Don’t drink to feel better， Only drink to feel even bettter. 2017-07-02 去了杭州新图书馆，很多书，各种展览，我且拿着两本摇滚史，昏昏睡着了。很多书，自己很想看，但没有那沉静的心了。一边急躁的翻阅着，一边内心告诉自己慢慢来。如果找下一个住所，尽量找靠近图书馆的，有花园的地方，只有这才能安慰我的心灵。 2017-07-03 当真正用到go的时候，才发觉自己理解到的东西还很多。浮躁的表现之一是:急于看到结果，渴望被看到。 2017-07-05 温暖的人心里都是有黑洞的。因为刻薄的人都把自己的阴影转移给了别人，而充满爱和阳光的人，却把大部分的痛苦自己吞咽下去。虽然没有人按照你所期待的方式来爱你。但你却可以用你希望的方式去爱别人。最近工作，学习，饮食很有规律，思念甚少。 2017-07-07 世界太辽阔了，我们生逢此世，如果穷极一生换来的只是一个狭隘、匮乏的人生，那真令人扼腕。 2017-07-09 在空白的时间了，自己经常会做一些没经过考虑的计划，让一件事变成纯粹的打发时间了。有计划性的参加社交活动，从聆听，到参与，慢慢学习；更改对付费模式的认知。 2017-07-11 黑夜里自己会变得对自己坦诚而非自欺欺人 。我会做一个自己想做的人,可我并不知道那是谁,这个问题不应该有答案，或是说，很长时间内都不应被回答，因为降临的救赎是廉价的，是寻找的过程让它弥足珍贵。 2017-07-13 文字惨白，刻意深刻的文字，也并不能表达出自己真正的思考。 2017-07-14 幻想过很多种遇你相见的场景，但见面且是你主动提出得，这让羞愧了一阵。悟空传，电影:悟空抗拒着命运，就了那失去的晚霞。最终放下、认输的时候，才觉醒归来，为改变不了的结局，奋斗完。在这乏善可陈的两小时里，我极力感受这你带来的感受，不知道下次会是什么时候. 2017-07-16 陪大学同学去了大护法，电影很精彩，满是隐喻，层次很到位是部好电影。但看的过程中完，我感受到莫名的焦虑。 2017-07-17 精神恍惚的一天，情绪失落。 2017-07-18 每当回头审视自己的一天，有的是巨大焦虑和徒然担忧。带着充满了杂质的心，我能行多远。 2017-07-20 工作中经常会被其他事打扰，是自己不坚定，容易被分散注意力；也是自己没能对一件事，注入投入。 学会拒绝其他事(优秀的人，通常不是好相处的人，因为他和纷繁的琐事保持着距离) 对事情轻重，能快速做合理安排(这需要自律，长期练习) 2017-07-22 再美好的时光总会结束，再好看的电影也会剧终人散，当过后再回味，觉得真实又像虚幻的情境。我不要去考虑爱的能力，努力去吧故事继续下去。 2017-07-24 每当有人问起我生日的时候，我都会思索是告诉农历时间，还是新历，毕竟两者相差还是有段时间。25岁了，无存款，无女友！我知道我迫切急速想让自己，快成长。越来越渴求金钱，这是对父母最实在的回馈，也不想因为它成为自己生活上的困扰。精神，生活的双重贫瘠，我还要不断索取。我还需要一点时间，但绝望也在无边无际的涌在身后。 2017-07-26 今天面试了两家公司，一家宜康，英国公司，面试先在了一套笔试，内容都很基础，但在自己薄弱的数据库哪里，没能想到正确答案。面试大多时候是在考核我的品行，综合能力，一边面试，一边记录下来，这细节也看出来外企，对待任何事都有严谨，认真的流程。但公司并不是自己所向往，公司技术团队人很少，项目陈旧，不会有接触到新领域的机会。第二家公司江苏华信区块链，面试是电话面试，因为是在公司，再加上信号不好，面试过程也碰碰磕磕，面试问题很宽广，很注重个人基础能力，自己也挺向往的。 2017-07-27 下午很意外的接到abcam的入职电话，Hr在不断强调着公司平台的优秀，企图压榨着我的薪资。抛开薪资，福利看待着两家公司，我更倾向数联。那里可能性更多，更适合我吧。我不需要平台给我镀金，不需要它附属的名气。我想的学习的机会，扩宽眼见的地方. 2017-07-29 25岁了，时间太快太快了。现在的生活，远没达到自己计划中那样，自己是被生活推着前进，被迫改变的那一方，从未能从容不迫的走着自己选择的路，一直都是在浅薄的急躁中。告诉新一岁的自己:你并不孤独了，你已经找到你想去追求，拥有的美好的人了，你所追逐的远方，并不是那么飘忽不定，你所忽视的眼前，已经出现新的光斑。 2017-07-30 想念一个人的滋味，在它面前自己没法隐藏。 2017-07-31 整天都在纠结于该做什么选择，一直都是患得患失的状态。自己害怕选错后，没时间给自己重新选择了。也不明白自己想期望的公司，只能冀希望能有人分享他经验。当我遇到困境，抉择的时候，我总会想是别人会做什么决定。渐渐文字带给我的另一层意义是，写下自己所思所感留下来，别人能从中参考，吸取到自己的思考。 2017-08-01 一天中的大多时候，都是在不断刷新着页面，找不到合适的事情做。自我驱动能力太差。 2017-08-03 正式申请离职了，经理也没有挽留我。开始交接，等待人事离职手续，一切都会顺理成章。等真的要离开了，回想这段时间，才发现自己一直没融入其中，公司没有条理的流程，陈旧臃肿的代码，只愿搁于游戏的同事，都是自己不愿融入的理由吧。我没能清楚的认识到自己身上处事的洁癖症，认为在里面保持独立，自省会能得到别人的欣奇，另类的看法。其实这样失去了让别人理解你和了解他们对生活的理解，处事为人的风格。说到底，自己不愿融入他们，还是我的心理障碍。 2017-08-07 入职杭州数联公司，细数起来这是第4家公司了。没有归属感，总是让自己轻易有离开的想法，给自己试错的时间越来越少。新的公司比较远，自己又可以拾起看书计划，也有理由说服自己换个新的住所。一切都是崭新的，未知的。 2017-08-08 读完李笑来的&lt;把时间当朋友&gt;，书中给了自己从未有过的角度审视自己，作者通过剖析自己怎样明白过来这个过程，让自己重新去理解时间，感悟。很多想法和做法和自己不谋而合，但我缺得是贯彻到底的毅力，和更深层次的思考。说到底自己还是个平庸的努力者。 随时记录，时刻感受到自己的成长。 自己没那么特别。 注重未来回报的价值。 改造这个世界，首先要改造的就是我们自己。 把时间当朋友,开启心智,努力想明白人这一辈子想要过什么样的生活。 相信我，你并不孤独。 2017-08-09 读池建强 ,刚读还是很惊艳的，阅读越无味，写的东西显得碎片化，并且浮光掠影，从中获得营养不多。很多观点和作者不谋而合，要作出一番事业，要付出的太多，每人能轻易成功。作者的心里路程，给了我很好的启示，带着思考，警示的态度过活着，书写出自己对过往的理解。 2017-08-31 “所谓的天才就是追着蝴蝶，不知不觉中爬上山顶的少年”. 2017-09-05 又开始迷失，因为自己的定位错了。 2017-09-11 奇葩说,一档敢于让国人发声并且思考的节目。表面似乎婉转迂回，实则有理想有勇气有热血。不敢说一档节目能改变多少国人，但确确实实改变了我，让我更深邃更多元的看这个世界。 2017-09-13 重新计划整理Evernote里的笔记摘录，更科学的使用。 2017-09-17 持续两天的RubyConf,各路大神聚在一起，看着他们谈笑风生，自己无地自容，自卑情绪格外强烈。远远看着，静静听着，羡慕他们能在一个领域能专注，痴迷于中。 2017-09-19 最近越来越忧虑，忧虑自己一天天更大了，忧虑自己是否能作出一番事业，忧虑自己没有年轻的新人厉害. 2017-09-20 失败，本以打算写个Evernote,结果烂尾，不是怕困难，是觉得力不从心，对这件事是否值得做怀疑。又开始做了个新项目.祈祷这次能坚持做完. 2017-09-21 白夜追凶笔记。 犯罪标记行为是指犯罪人为了满足某种心理上或情感方面的需要而实施的一种特殊行为，如患有洁癖强迫症的凶手每次行凶都要清理现场。 每个人都有自己熟悉的、经常活动的区域，也就是所谓的心理安全区。 尸体上伤口的创面皮肤是内收而不是外翻的，说明死者受此伤时还活着，身体的自愈系统仍在运转。 洛卡尔物质交换定律：犯罪行为人只要实施犯罪行为，必然会在犯罪现场直接或间接地作用于被侵害客体及其周围环境，会自觉或不自觉地遗留下痕迹。 2017-10-07 想真心走进一个人谈何容易，每一个人都在坚守着自己那片骄傲的孤岛。 2017-10-08 满目疮痍的生活，让自己越来越苦闷，试着用另外一种方式表达出来吧，用大笑来稀释生活的沉重。 2017-10-09 要改变，先让自己走出去。当个笑得最欢的人，最会隐匿最悲伤的人。 2017-10-10 但你跟另一个人分享生活里最鸡零狗碎的一部分，而另一个，并不会毫不厌倦地全部接受。这是要好好思考的地方。 2017-10-11 只因为 我们一直生活在光明中，才不知道黑暗可以有多暗。多经历一些事吧，这对于人生的价值观是一种重构，也是一种锤炼。 2017-10-12 Rick 一个能把黑洞整成恒星的人，没电了就造一个小星球让里面的劳动者来提供电力，在该陪着女儿长大的日子里驰骋银河系，嘴巴有剧毒，骨子里三观很正，聪明到极致又明白世界的运行规律,但是依旧敌不过那些规律和自己的意识。 2017-10-15 “你只是个孩子，你根本不晓得你在说什麽。所以问你艺术，你可能会提出艺术书籍中的粗浅论调，有关米开朗基罗，你知道很多，他的满腔政治热情，与教皇相交莫逆，耽于性爱，你对他很清楚吧？但你连西斯汀教堂的气味也不知道吧？你没试过站在那儿，昂首眺望天花板上的名画吧？肯定未见过吧？如果我问关于女人的事，你大可以向我如数家珍，你可能上过几次床，但你没法说出在女人身旁醒来时，那份内心真正的喜悦。你年轻彪悍，我如果和你谈论战争，你会向我大抛莎士比亚，朗诵“共赴战场，亲爱的朋友”，但你从未亲临战阵，未试过把挚友的头拥入怀里，看着他吸着最后一口气，凝望着你，向你求助。我问你何为爱情，你可能只会吟风弄月，但你未试过全情投入真心倾倒，四目交投时彼此了解对方的心，好比上帝安排天使下凡只献给你，把你从地狱深渊拯救出来，对她百般关怀的感受你也从未试过，你从未试过对她的情深款款矢志厮守，明知她患了绝症也再所不惜，你从未尝试过痛失挚爱的感受……” 2017-10-17 “我觉得我人生的前20年，在学校里度过的日子，都是内省的。像是在平静的陆地上，用泥土精心雕琢着一个城堡，从未有风暴来袭过，听着隐隐地海浪声，便心怀向往地期待一片蔚蓝的大海。离开学校的时候，我才发现，一个小小的海浪拍来，便能让我的城堡消失在沙滩上，没有任何痕迹。而那卷走我的漩涡，让我甚至连呼吸的力量都没有，我的眼睛无法睁开，既看不到前方，也看不清自己。”—— 摘 2017-10-18 “你所经历的我也曾经抵达，我正遭受的也许甚于你的今天。可是，我还是想和你做一个约定，就像是守望那间小店一样的邀约：我在春天等你” ——-和菜头 2017-10-19 好久没认真坐下来，反思审视写一些东西了。 2017-10-22 习惯了压抑自己，再沉重的心情，选择去逃避面对自己，减少它带给自己的创痛。自身道路的迷茫，灰暗的现状，无力作出改变的困境，让自己除了沉默，忍受，做不了什么。 2017-10-29 我嫉妒别人的年轻，且又渴望着能走进，看到别人为一件事，热血的坚持着。我会为自己难过，痛恨着自己的无能。 2017-11-01 很难过的一天，试用期没过。辞退理由是：做事马虎，没有团队交流积极性。在这方面确实做的很差，所以我没有任何怨言的接受了，我不能去评判别人用人标准。我难过的理由是，生活里的那个裂缝，终于崩裂开了，到自己必须去面临改变的决策的时候了，不能这样苟活着。 2017-11-14 “人是悬挂在自己所编织的意义之网上的动物。” 2017-11-15 当所有人都觉得，你是这个深秋里行将腐烂的果实；你要记住你心中，还藏着一枚属于下个春天的种子。 2017-11-28 经历了 2017 这年里最黑暗，无助的时间。不断的被别人否定，自我怀疑，有时候会冲动到，不想继续再这条路上继续下去了。不敢去反思，忏悔自己的问题，怕触破到那扶持着我的那点脆弱假象。这次教训迟早会来的，因为维系着我生活的理由是如此搞笑。 2017-12-17 很失败的一次周分享，脱稿分享 Ruby，想象中按着计划应该会不差，同事应该能 Get 我的意思。事实中状态不断，脱线，段节奏。让自己中途试图想快点结束。失败原因是，准备不充分，高估了别人的理解能力。这个分享我会一直坚持下去，注重锻炼，培训自己机会。 2017-12-19 今天异常难过，在这凛冽的天气里，原来只有我形单影只。 2017-12-25 圣诞节，第一次收到礼物，两双袜子，一包糖。满身欢喜的拿起了手机，打算分享，顿了顿，又只能继续戴上耳机,不想再被节日的氛围侵扰到。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[import指南]]></title>
    <url>%2Fpassages%2F2016-11-12-import%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[import 写Go代码的时候经常用到import这个命令用来导入包文件，而我们经常看到的方式参考如下： 123import( "fmt") Go的import加载模块方式 相对路径import “./model” //当前文件同一目录的model目录，但是不建议这种方式来import 绝对路径import “shorturl/model” //加载gopath/src/shorturl/model模块 点操作 123import( ."fmt") 这个点操作的含义就是这个包导入之后在你调用这个包的函数时，你可以省略前缀的包名，也就是前面你调用的fmt.Println(“hello world”)可以省略的写成Println(“hello world”) 别名操作 123import( f "fmt") _操作 1234import ( "database/sql" _ "github.com/ziutek/mymysql/godrv") _操作其实是引入该包，而不直接使用包里面的函数，而是调用了该包里面的init函数。]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Golang笔记]]></title>
    <url>%2Fpassages%2F2016-11-11-Golang%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[变量 var 语句用于声明一个变量列表，跟函数的参数列表一样，类型在最后。如果初始化值已存在，则可以省略类型；变量会从初始值中获得类型。 1234567891011package mainimport "fmt"var c, python, java boolfunc main() &#123; var i int fmt.Println(i, c, python, java)&#125; 在函数中，简洁赋值语句 := 可在类型明确的地方代替 var 声明。 函数外的每个语句都必须以关键字开始（ var 、 func 等等）， 因此 := 结构不能在函数外使用。 123456789package mainimport "fmt"var c, python, java boolfunc main() &#123; var i, j int = 1, 2 k := 3 c, python, java := true, false, "no!" fmt.Println(i, j, k, c, python, java)&#125; go基本类型 bool string int int8 int16 int32 int64 uint uint8 uint16 uint32 uint64 uintptr byte rune float32 float64 complex64 complex128 类型转换123456789var i int = 42var f float64 = float64(i)var u uint = uint(f)// 或者，更加简单的形式：i := 42f := float64(i)u := uint(f) 类型推导 在声明一个变量而不指定其类型时（即使用不带类型的 := 语法 或 var = 表达式语法）， 变量的类型由右值推导得出. 12var i intj := i // j 也是一个 int defer defer 语句会将函数推迟到外层函数返回之后执行。推迟调用的函数其参数会立即求值，但直到外层函数返回前该函数都不会被调用。 123456789package mainimport "fmt"func main() &#123; defer fmt.Println("world") fmt.Println("hello")&#125; 数组 类型 [n]T 表示拥有 n 个 T 类型的值的数组。 表达式 var a [10]int 会将变量 a 声明为拥有有 10 个整数的数组。数组的长度是其类型的一部分，因此数组不能改变大小。 这看起来是个限制，不过没关系， Go 提供了更加便利的方式来使用数组。 切片 切面可以用内建函数 make 来创建，这也是你创建动态数组的方式。make 函数会分配一个元素为零值的数组并返回一个引用了它的切片. 12345678910111213141516171819202122package mainimport "fmt"func main() &#123; a := make([]int, 5) printSlice("a", a) b := make([]int, 0, 5) printSlice("b", b) c := b[:2] printSlice("c", c) d := c[2:5] printSlice("d", d)&#125;func printSlice(s string, x []int) &#123; fmt.Printf("%s len=%d cap=%d %v\n", s, len(x), cap(x), x)&#125; 切片的切片12345678910111213141516171819202122232425262728293031package mainimport ( "fmt" "strings")func main() &#123; // Create a tic-tac-toe board. board := [][]string&#123; []string&#123;"_", "_", "_"&#125;, []string&#123;"_", "_", "_"&#125;, []string&#123;"_", "_", "_"&#125;, &#125; // The players take turns. board[0][0] = "X" board[2][2] = "O" board[1][2] = "X" board[1][0] = "O" board[0][2] = "X" for i := 0; i &lt; len(board); i++ &#123; fmt.Printf("%s\n", strings.Join(board[i], " ")) &#125;&#125;// result// X _ X// O _ X// _ _ O Range for 循环的 range 形式可遍历切片或映射。当使用 for 循环遍历切片时，每次迭代都会返回两个值。 第一个值为当前元素的下标，第二个值为该下标所对应元素的一份副本。 修改映射123456789101112131415161718192021在映射 m 中插入或修改元素：m[key] = elem获取元素：elem = m[key]删除元素：delete(m, key)通过双赋值检测某个键是否存在：elem, ok = m[key]若 key 在 m 中， ok 为 true ；否则， ok 为 false 。若 key 不在映射中，那么 elem 是该映射元素类型的零值。同样的，当从 映射 中读取某个不存在的键时，结果是 映射 的元素类型的零值。注 ：若 elem 或 ok 还未声明，你可以使用短变量声明：elem, ok := m[key]]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[杂绪]]></title>
    <url>%2Fpassages%2F2016-11-06-%E6%9D%82%2F</url>
    <content type="text"><![CDATA[离开不难，决断也不难，难的从来都是时间。 生活还是那样,平淡，重复。不想对任何事情，产生兴趣。就想一个人，安静待着。天气开始转凉了，在找衣服的途中，发现了一件去年买的新衬衫，重未穿过，很多事与人，难免忘掉几次。 最近，下班后在漫无目的的行走中，总会想起认识这个城市的那些夜晚。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ruby里的%Q, %q, %W, %w, %x, %r, %s, %i]]></title>
    <url>%2Fpassages%2F2016-09-30-%25%E7%9A%84%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[%Q 用于替代双引号的字符串. 当你需要在字符串里放入很多引号时候, 可以直接用下面方法而不需要在引号前逐个添加反斜杠 (\“) &gt;&gt; %Q(Joe said: "Frank said: "#{what_frank_said}"") =&gt; "Joe said: "Frank said: "Hello!""" %Q(…)，这个括号可以被非数字字母的符号或成对的符号代替。&gt;&gt; %Q(Joe said: "Frank said: "#{what_frank_said}"") =&gt; "Joe said: "Frank said: "Hello!""" 你还可以这样&gt;&gt; %/Joe said: "Frank said: "#{what_frank_said}""/ =&gt; "Joe said: "Frank said: "Hello!""" %q 它的语法很像%Q, 用于单引号字符串。但使用单引号不受表达式替换，转义序列影响。&gt;&gt; %q(Joe said: 'Frank said: '#{what_frank_said} ' ') =&gt; "Joe said: 'Frank said: '\#{what_frank_said} ' '" %W 别使用与数组里面的双引号。用法和%Q类似。&gt;&gt; %W(#{foo} Bar Bar\ with\ space) =&gt; ["Foo", "Bar", "Bar with space"] %w 用于表示其中元素被单引号括起的数组。&gt;&gt; %w(#{foo} Bar Bar\ with\ space) =&gt; ["\#{foo}", "Bar", "Bar with space"] %x 使用`方法执行一段shell脚本并返回标准输出内容。&gt;&gt; %x(echo foo:#{foo}) =&gt; "foo:Foo\n" %r 语法近似于%Q, 用于正则表达式.&gt;&gt; %r(/home/#{foo}) =&gt; "/\\/home\\/Foo/" %s 用于表示symbol, 但是不会对其中表达式等内容进行转化。&gt;&gt; %s(foo) =&gt; :foo &gt;&gt; %s(foo bar) =&gt; :"foo bar" &gt;&gt; %s(#{foo} bar) =&gt; :"\#{foo} bar" %i Ruby 2.0 之后引入的语法, 用于生成一个symbol数组2.0.0p247 :014 &gt; %i(a b c) =&gt; [:a, :b, :c]]]></content>
      <categories>
        <category>Ruby</category>
      </categories>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oauth2 on Rails]]></title>
    <url>%2Fpassages%2F2016-09-17-oauth2%20on%20rails%2F</url>
    <content type="text"><![CDATA[OAuth2是一个关于授权（authorization）的开放网络标准。 Oauth身份验证过程身份认证的服务平台,和一个客服端程序做为用户认证。Rails通常使用devise, doorkeeper and omniauth-oauth2 gems构建Oauth应用。The server applicationDevise gem将会提供身份验证, doorkeeper gem 将允许应用做为一个Oauth2 server。添加 devise and doorkeeper gems 到Gemfilegem "devise" gem "doorkeeper" 生成这gem的引用和迁移文件。rails g devise:install rails g devise User rails g doorkeeper:install rails generate doorkeeper:migration rake db:migrate 这过程会有很多文件生成,配置doorkeeper.rb文件,修改doorkeeper的初始化，让它使用devise作为认证。resource_owner_authenticator do current_user || begin session[:user_return_to] = request.fullpath redirect_to new_user_session_url end end admin_authenticator do current_user || redirect_to(new_user_session_url) end The resource_owner_authenticator这代码块的意思:允许 devise 认证的用户可以访问doorkeeper的资源。假如用户没有通过认证,就存储url,跳转到登录页面。The admin_authenticator bock 做为访问用户限制。它用来管理客服端应用程序的所需令牌身份验证的限制。创建控制器，为客服端提供认证用户的信息。class ApplicationController &lt; ActionController::Base before_action :doorkeeper_authorize!, only: :me def me render json: User.find(doorkeeper_token.resource_owner_id).as_json end end doorkeeper_authorize! 检测请求oauth的授权码是否正确,如果错误将渲染401 Unauthorized的请求头。不能忘记更新路由Rails.application.routes.draw do use_doorkeeper devise_for :users get '/me' =&gt; 'application#me' end 客服端应用需要被注册，在 server application平台上。访问http://localhost:3000/oauth/applications/new，注册新应用。你将会跳转到一个认证页面，按照规定要求填写信息后，将会被返回client_id,secret信息。]]></content>
      <categories>
        <category>Ruby</category>
      </categories>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一个客服端应用]]></title>
    <url>%2Fpassages%2F2016-09-17-the%20client%20application%2F</url>
    <content type="text"><![CDATA[第一篇我们构建了Oauth 服务应用,现在我们创建一个发客服端应用。 omniauth-oauth2 gem,允许我们在试用Oauth2的时候，仅通过一个简单的配置文件(strategy)就可以办到。gem 'omniauth-oauth2' Omniauth 是一个通用gem,它允许程序员用它使用各种oath提供者，通过不同的配置。在lib下创建doorkeeper.rbrequire 'omniauth-oauth2' module OmniAuth module Strategies class Doorkeeper &lt; OmniAuth::Strategies::OAuth2 option :name, 'doorkeeper' option :client_options, { site: 'http://localhost:3000', authorize_url: 'http://localhost:3000/oauth/authorize' } uid { raw_info['id'] } info do { email: raw_info['email'], } end extra do { raw_info: raw_info } end def raw_info @raw_info ||= access_token.get('/me').parsed end end end end 再生成omniauth的配置文件touch config/initializers/omniauth.rb require 'doorkeeper' Rails.application.config.middleware.use OmniAuth::Builder do provider :doorkeeper, &lt;application_id&gt;, &lt;application_secret&gt; end application_id 和 application_secret 填入上一篇文章中得到的值。配置路由Rails.application.routes.draw do root to: redirect('/auth/doorkeeper') get '/auth/:provider/callback' =&gt; 'application#authentication_callback' end end 第一行doorkeeper的认证路由，将会被omniauth处理，第二行服务器的回调地址，将会有身份验证。class ApplicationController &lt; ActionController::Base auth = request.env['omniauth.auth'] render json: auth.to_json end end 参考资料 http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html https://ruby-china.org/topics/14656 http://linjunzhu.github.io/blog/2014/09/21/doorkeepershi-yong-jian-jie/]]></content>
      <categories>
        <category>Ruby</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Rails 笔记]]></title>
    <url>%2Fpassages%2F2016-09-13-Rails%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[简洁代码 臃肿的写法 flag = false if request.referer.present? if request.referer.include?("/users/sign_in") || request.referer.include?("/users/sign_up") flag = true end end 简洁写法 flag = request.referer &amp;&amp; ["/users/sign_in", "/users/sign_up"].include?(request.referer) @filters_arry = Array.new #bad @filters_arry = [] #good if @question.answers.count &gt;0 #bad if @question.answers.count.positive? #good if @question.answers.count == 0 #bad if @question.answers.count.zero? #good scope 的用法 给一个ActiveRecord::关系对象，添加一个类方法用于检索和查询对象,如果它返回nil或假,者返回的所有范围。 #简单的方式 class Post &lt; ActiveRecord::Base scope :is_active, {where(status: 'active')} scope :has_content, {joins(:comment).where("comments.content is not null")} end #带参数 class Shirt &lt; ActiveRecord::Base scope :colored, lambda { |color| where(:color =&gt; color) } #旧写法 scope :colored, -&gt;(color) { where(:color =&gt; color) } #新写法 end 当我们传入的参数如果是一个变化的量时，要使用lambda.一个是在类初次加载时生效；一个是在被调用时才生效。]]></content>
      <categories>
        <category>Ruby</category>
      </categories>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2016日常]]></title>
    <url>%2Fpassages%2F2016-08-25-8%E6%9C%88%E6%97%A5%E5%B8%B8%2F</url>
    <content type="text"><![CDATA[2016-8-25 安装好laravel，准备laravel之旅。 2016-9-08 我又开始认真读书了。 2016-9-09 成长就是身边的东西不断被剥离的过程。 2016-9-11 参加了一次众凑活动—&lt;我的诗篇&gt;。富士康工人诗人许立志，深刻的感受到了他那深深的孤寂。 2016-9-20 第一次强烈的意识到写代码是件那么开心的事情。除了它好像没有其他事情是能做的好的了。 2016-9-21 认真思考，是什么原因造成我现在的困难处境。 2016-9-22 学习了JavaScript Promise，思考学而没能及时用到，是否需要继续。 2016-10-11 在这充满套路的世界，能清纯烂漫的套路吗? 2016-10-12 二姨妈走了，我只能在这，用微不足道的方式追悼着。 2016-10-17 除了憎恨自己了，就没有什么了。 2016-11-1 不断的强迫自己与人交流，打交道，想让自己变得开心点（失败） 2016-11-4 我拼尽全力想要说的话，可能这辈子都不能传达了． 2016-11-5 生命中最难的阶段不是没人懂你，而是你不懂你自己. 2016-11-8 看了一天golang,折腾着装环境,找项目．”Go是Google开发的一种编译型，可并行化，并具有垃圾回收功能的编程语言。”—百度百科．不知道为什么自己想学它，可能是不想让自己无事可做． 2016-11-25 渐渐的开始接受自己，接受不完美的自己。 在接受自我之后，需要实现的流程 和 性格的再造。减少无序以及不确定性， 提升自己的信心。 2016-11-28 恍惚，思考过深，擦拭着眼眶，才知自己流了眼泪。 2016-12-01 经常看英语文档，死啃. 2016-12-23 一晃停顿好久没写了，不管心情如何，生活是否如意，都需要记录。看了一本书&lt;银河铁道之夜&gt;，继续看完了&lt;西部世界&gt;，看了&lt;欺诈游戏&gt;，买了两本书。以前累计的债，慢慢还。 2016-12-29 耐着性子看了三体。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2016日常]]></title>
    <url>%2Fpassages%2F2016-08-05-Ruby%E5%A4%87%E5%BF%98%E5%BD%95%2F</url>
    <content type="text"><![CDATA[attr_accessor与cattr_accessor attr_accessor 和帮你在 Ruby 的类別里产生一对getter以及setter方法。 123456789class Person def name @name # simply returning an instance variable @name endendperson = Person.newperson.name # =&gt; nilperson.name = "Dennis" # =&gt; no method error person.name 其实执行的是person.name()这个方法，person.name=”Dennis”是执行的是person.name=()这个方法。1234567class Person attr_accessor :nameendperson = Person.newperson.name = "Dennis"person.name # =&gt; "Dennis" attr_accessor 给person加上了person.name这个读方法，和person.name=()这个写方法。 cattr_accessor 类的共享实例 1234567891011121314class Counter cattr_accessor :class_count attr_accessor :instance_countendcounter1 = Counter.newcounter1.instance_count = 1counter1.class_count = 1counter2 = Counter.newp counter2.instance_count#&gt; nilp counter2.class_count#&gt; 1 实例变量 ruby的实例变量以@开头，是指实例化后的对象，才绑定的变量。实例变量属于特定的对象。 1234567class Myclass def initialize(name,gender,age) @name=name @gender=gender @age=age endend @name， @gender，@age都是实例变量。可以在类或子类的方法中引用实例变量。若引用尚未被初始化的实例变量的话，其值为nil。只有在类被实例化时，实例变量才产生和存在。但是，实例对象并不能直接访问实例变量。类变量 类变量在类的定义中定义，可以在类的特殊方法、实例方法等处对类变量进行赋值和引用。类变量被类，类的子类和他们的实例对象共享。 1234567class Person @@number = 0 #使用前必须有初值 def initialize(name, gender, age) @age = age @@number += 1 endend 类变量是私有的，在类外无法直接访问，你只能通过实例方法和类方法去访问它。可以把类变量看作一种被类、子类以及它们的实例所共享的全局变量。模块中定义的类变量(模块变量)被所有包含该模块的类所共享。123456789101112131415161718192021222324252627282930class Parentendclass Child &lt; Parent @@var = 'var in Child' def self.var @@var endendclass AnotherChild &lt; Parent @@var = 'var in AnotherChild' def self.var @@var endendputs Child.var # =&gt; var in Childputs AnotherChild.var # =&gt; var in AnotherChildclass Parent @@var = 'var in Parent' def self.var @@var endendputs Parent.var # =&gt; var in Parentputs Child.var # =&gt; var in Parentputs AnotherChild.var # =&gt; var in Parent 如果父类中初始化了类变量的话，所有子类将共享同一个类变量，即使之前各子类都具有不同的类变量定义。]]></content>
      <categories>
        <category>Ruby</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[24岁]]></title>
    <url>%2Fpassages%2F2016-08-04-24%E5%B2%81%2F</url>
    <content type="text"><![CDATA[每次想提笔写些东西，都需要经历莫大的决心。希望生活过的忙碌些，连黯然神伤的时间都要想方设法的挤出来。忙到脱节，到麻木，到发不出任何的声音。遂自己做起事来不要命，加班，学习。也特别喜欢一个人安静的呆着。 24岁了，自己未减少一丝狼狈。有时候会幻想有一个叫”真理”的老头出现，喝呲着我，把我痛骂一顿,能给我一点提示，告诉我前方的路该如何走,我不想这样毫无目地的坚持了。每次颓丧，浑噩地损耗自己后，任何希冀都没出现，我只能默默刮掉胡须，佯装明天过后会是新的自己。 关于新的生活新的工作，新的环境，新的同事。自己还固守着以前的工作模式，对别人带了不便了。老板觉得我参与度不高，没能很好的融入团队。同事觉得听不到我的意见。 不管是什么评论，我都会虚心的听进去，不断的改进，反思自己。不管是多难的改变，自己都会尽力去尝试做。不爱说话：虽然我做不到插科打诨,但不该沉默的时候，会主动说话；别人的逗趣，会配合着。 没有自己的主见:习惯了任何事情深思熟虑后，做决定;不想做不成熟的表述。 我需要的是重新开始了一种新的生活方式,一种一想到细节内心就觉得温暖而饱满的生活。 目标:努力说话，给每一个带来的热情了，温暖。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从忧患中体会幸福感]]></title>
    <url>%2Fpassages%2F2016-05-26-%E5%BF%A7%E6%82%A3%E4%B8%AD%E4%BD%93%E4%BC%9A%E5%88%B0%E5%B9%B8%E7%A6%8F%E6%84%9F%2F</url>
    <content type="text"><![CDATA[为什么在这里？一句确切的答案，我说不出。我觉得有必要面对我自己。 到了羞于提自己年龄的间断了，需要有承担责任的压力，更有许许多多阻力，这很正常呀，很多人这年龄不都这样，所以我把标题成：”仍在忧虑”改”成从忧患中体会到幸福感”。 两双休闲鞋穿了三年，两条牛仔裤（一条找不到了），因为很恼买东西，于是顶着节俭的名义，将就着过，又担心出现没钱又没穿的坑爹局面。会提醒自己照顾好自己。经常翻看时尚文章，这和品味学养有关，不太指望拥有，可学着欣赏，对奢侈美有自己的理解不是坏事，毕竟这里真正内容是繁华，艺术，我会有机会去体会的。 我不愿意走得太快，像是在赶路狂奔，到真正累的时候，发现根本不知道自己干了什么，或是在原地踏步，所以，马上，我会用现状找工作，而不是一定要到最想去的公司工作，多留恋过程，多爱生活。 困惑许久的小问题，”怎样的风景值得留恋？我该付出时间？”我目前定的标准是：让我接纳让我爱，或，接纳我爱我的美景，就驻足，用心去欣赏，留在心里。 我该为怎样的人花时间，在我即将离开的工作环境中，我就深刻感受和思考这点。真实的现实亮晃晃地提醒我，别去。我和她性格或许略有相似，办事说话及思想价值观的细观察，我和她就是两类人，两条路，于是性格的共鸣也就不值一提，于是，对她我大多是感受。我感受思考出这么一段话：一天24小时，见到的人又太多，该将哪个他/她迎进我的生活。工作上的同事和生活中的朋友，标准是什么？未定。 关于过去的随想 夜里近12点了，写下工时：18个小时，摔下本子，跳出驾驶室，边关门，边说出一句“1800块”，想是为了让自己高兴点吧，1800块呀，我挣钱了，收入还蛮不错，可我就是高兴不起来，反而有点郁闷，也不打车，在夜色中慢慢的走。 躲在宿舍里。我停下脚步，找不到面对未来办法，对时间怎么处理，很多很多问题，当我完完全全面对自己、面对自己的路、自己的梦想。整个人是赤裸的，性格中的丑脾气完全释放，想骂人，焦虑，坐不住，幸亏有一个24小时又一个24小时来给自己成长。我该工作，做什么呢？ 只要金钱把我推着去对的地方，干嘛不让它给我压力，推我几把呢。在大学最后一年，我连买馒头的钱都拆成两份，可依然让自己安心认真的在图书馆看书，尽管，走在人群中会有忧虑，我要出去看看。 或许只为挣钱，我不需要来这里，我的能力和条件在家乡能挣更多，又或许在这里我确实什么都不算，可我没有怨言，难点累点对我不算什么，我来这里是我心中的声音告诉我的，过自己想要自由生活，所以，目前而言，争取到想要的工作很重要，但是又不重要，我说过不设过重目标，我最想要的是幸福，第二是自由，第三是梦想，第四才是工作。让我的幸福和自由不受金钱名利的控制，并且找和梦想有关的工作是有关幸福与自由的事，我怎么会抱怨，感到劳累。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[吃东西太快了]]></title>
    <url>%2Fpassages%2F2016-05-23-%E5%90%83%E4%B8%9C%E8%A5%BF%E5%A4%AA%E5%BF%AB%E4%BA%86%2F</url>
    <content type="text"><![CDATA[独自生活才是最好的锻炼。钱包别忘记，洗衣打扫房间，如何买东西，定期存款，温柔的和时间守望。 独居近两个星期，开始的时候面对空白的大块时间一脸茫然，每天都在敷衍自己，执行本定好的安排会没耐心，特瞌睡。 1，一个人生活不是孤僻，玩忧郁，可以任意颓废，想都别想，我不是佛，整天淡定吃斋打坐，时间好难熬，觉得是在作践自己。不断回想独居阶段要处理的具体事务，及坚定目的不动摇。 2，照顾好自己，别觉得三年只穿款式颜色一样的鞋就是节俭，别顾影自怜，自我忧伤，觉得世界不要我了，而是端正态度，能一天24小时完完整整面对“生活”一词，就好好感受。“工作”一词暂居后。 3，没天打包同一份外卖，喝着劣质的水，身体出问题，才想到要改进。 4，我开始跑步，早起和毅力和健康有关。 5，自觉执行计划中的安排，改善之前生活中的暴露的不足，改正一些待人接物的思想，改善性格， 6，多问自己的感觉去安排任务，一小时一小时的安排内容。不要老在一种感觉中打转被困扰，例如疲乏感。少作一些无谓的思索，诸如，去工作，看什么书，计划定了，理由不充分就少作更改。 安安静静的让一个月时间来成长我，而我安安静静的看和感受自己对自己对生活对梦想对工作对友谊对家庭对爱情的再理解再变化。我想让自己平稳些，情趣些，波澜不惊些，淡定从容些，我会变成这样的人吗？时间在走，我心怀期待。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[心诚则灵]]></title>
    <url>%2Fpassages%2F2016-05-15-%E5%BF%83%E8%AF%9A%E5%88%99%E7%81%B5%2F</url>
    <content type="text"><![CDATA[喋喋不休的写了很多日志，仿佛你已经在身边，讲许多我的故事，这个举动是不是表示我懂得付出了。或许我付出到足够，就能正如我期待的那样。 其实我想说还很多很多，怎么会说想说的都说了呢。你并没有袒露多少真实心境，可能是不怎么想吧。我也不能为此心乱如麻空虚浮躁,现在把渺茫空洞虚无通通耗光了，某天我会回去找到你，把这个故事从头说一遍。 站在深大门口，想象你会干些什么，一切突然变的陌生了，一开始没敢进去，深感自己的自卑越发严重，已经有些浮夸了，做人不够亲切,主动是我不愿意的。 从门口石碑开始观赏起来，老师在面对湖面打太极，男同学在面对湖面吹笛子，两个老人在哄小孙子、一直走完小路，是在路口转台处看见的一个女同学，她坐着石凳上，如入神境般投入地背诵着英语单词，我顺势就坐在树荫下，转头看了眼通往湖中心的道路，又看看她旁边围着小孙子喂早点的两个老人，认真的看着她一会把书抱在胸口闭起眼念句子一会儿再打开书看一眼又收回怀里闭起眼念着我一句都听不懂的英语单词，可我听着好开心，似乎在感情里所有的摸索和挣扎都为了此刻这样子：晨光，湖水，微风，而我刚好安静的坐在你面前倾听每一个单词。 如果我还读大学肯定也会每天在湖边读书背单词，但是我却觉得很释然，她才是我想要的爱情。关于爱情的梦想在这里的早晨完全实现了，接着我感到很难过，很难过。 大中午的，阳光令我眼睛睁不太开。一个戴着黑框的圆形眼镜，很知识性的学女范的同学,在树下等待着男友吧;不时从窗户观望教室，再看看教室中间还收理着本子的女生，一下子我就知道门外男生的心思,我等你收拾好本子一起下课的背影是最青春的，无论什么时候;在食堂边吃饭边偷听大一学妹和男盆友的故事：因为他骑单车双手脱把的姿势很帅。 逐渐被气氛感染，贪恋的窥视着所有青春洋溢的女孩男孩。嘈杂的食堂里，一张四人座两个人两盘饭面对面一大一小一顶鸭舌帽一副眼镜，漂亮的构图，不自觉的向前了,我想把所有最好最纯粹的礼物都给她们。 下午图书馆游历一番，和爬在桌子上做了个梦。傍晚在最近最好的位置，钢琴、黑管、小提琴、大提琴、吉他、听到了《菊次郎的春天》《蓝色多瑙河》，最后她们合唱了《遇见》。一度热泪盈眶，眼泪溢出眼眶，我是太孤单了吧，同时我愿意孤单，享受着边听歌边流泪，其实，当我知道今天可以有演奏会可以欣赏，我就知道我要流眼泪，毕竟我好久没流泪了。 离开校园时，一辆单车停放在草坪上，看到坐在木椅上的女生处在望湖深思中，多想走近说：害怕陌生人吗？ 我知道你处在烦恼中…. 由心去发现怎么爱，这件很重要一辈子都要做的事。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[心中的话语]]></title>
    <url>%2Fpassages%2F2016-05-09-%E5%BF%83%E4%B8%AD%E7%9A%84%E8%AF%9D%E8%AF%AD%2F</url>
    <content type="text"><![CDATA[你说过的好些话，我说过的好些话，现在形成了我心中的话语。 你出现时是特别的，多希望自己就像做平常的决定，一点也没犹豫，就像是到点了我要赴约和谁吃饭似的。 一直害怕羞涩不敢说的话，终于可以大声说出口，好不容易，希望以后都不用这样，太复杂是无聊的：你每次出现在我目前的时候，我都觉得你好美好美，不敢直视，说话，急促的说了几分钟话之后，不那么紧张了，才悄悄打量你，一味的欣赏。只是吧，眼睛越来越近视，看不太清楚了。 思念，就算是最清浅的午睡我都会梦到你，这样的感觉，就是爱带来的吧。近两天的一次很清浅的午息，我居然梦见你的笑容，醒来时，我不自觉的微笑念到：我越来越离不开你了，再强烈的追求，不过是想每天可以不经意间看到有你还在那个位置。 现实还是严峻吧，我不可以回避。同时也是烦躁好多工作不知怎么安置。 我的出现有给你全新不同以往的体验吧。 情伤是最小的伤，甚至是收获，一小阵的挫折和伤心换来的是成熟懂事，比起衣不遮体食不果腹，横遭悲剧身残家破，好太多了。 我觉得”你”这个词给我造成了好多困扰。因为这个词是障碍又是指引，尽管，我表面把感觉藏了又藏，但是对我们相爱这件事总怀有最美期待。 工作状态异常胶着烦闷辛苦但是我总想抽离出来去，因为我心里有你就会尽量靠近你。 付出诚恳善良，能换一个你。无数次提醒自己，一定要先主动付出，不然当我得到我想要的东西时，被拿走的可能就是我不愿给的。多付出辛劳、善良、金钱、在这付出的过程中我能得到更多的生命体验和故事。 对我这种孤僻生根在心的人而言，爱谁都是艰难的吧。 老是念及一些去了做了些什么见到什么人，不是装强，而是我急于证明自己吧。 因为你让我重新认识自己和认知世界 未来很飘渺恐惧，但是我还欢欣鼓舞的走着。 希望我的每样东西个人经历都能来之不易有价有偿。 现在每天充实得有些拼命。 我的自言自语该结束了]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[给母亲的话]]></title>
    <url>%2Fpassages%2F2016-05-08-%E7%BB%99%E6%AF%8D%E4%BA%B2%E7%9A%84%E8%AF%9D%2F</url>
    <content type="text"><![CDATA[我深知我们三兄弟的人生幸福美满是你的最大期盼。 放心，我在外面，过得很好，不要太挂念（给母亲的话） 每次放10张100元，会退出来1张，想寄4000元钱回去的结果只寄了3600元，下个月吧，看看能寄多少。觉得挣很多很多钱，就会让你高兴，发现自己做不到也不想拼命挣钱，于是，反思：难道只有钱才证明自己让你高兴才是孝顺？ 感觉得到你找不到理由用沉默来反对我出来，可是我要有自己的人生呀，已经不是小孩子了，凡事一定要你理解透彻；尽管，我努力和你沟通交流了，可是，一些年代的距离已经无法拉近，精神的理解达不到尽善尽美；还好，我没放弃，倾尽全力调解问题了。 现在，每个月打一次电话，听你唠叨烦心事，然后，懂事的轻声宽慰你。不是负担，是责任，是回报，是感恩。 似乎，你从未理解我，也谈不上如何教导，以至于，我的很多行为，你只会生气、哀伤、无能为力、无可奈何。那些事已经不重要，我知道接下来的日子该我照顾你了。 今年的你，生气、烦恼、恐惧、担忧、总说‘腰很痛’。放心，今天以后我会帮你寻找人生的幸。在你苍老前，我会成长强大到让你满意的，并且，超出你的意料。真的不用太牵挂，我能照顾好自己。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[观影习惯改变中]]></title>
    <url>%2Fpassages%2F2016-05-07-%E8%A7%82%E5%BD%B1%E4%B9%A0%E6%83%AF%E6%94%B9%E5%8F%98%E4%B8%AD%2F</url>
    <content type="text"><![CDATA[透过电影，我们的人生延长了三倍，《一一》里杨德昌的这句话触动我至今。一直都这样看电影—多而零散，现在觉得不好，那就改。 《星球大战7》：有些电影带給我们的东西，已经是超出电影本身的了。 《我的新野蛮女友》：我是不是该预设我想要的爱情，我愿意的爱情是什么样的，空白，没画面，多去见更多人和更多人接触。电影里的生活爱情模式，真的有点距离。结局太假，假到破坏我对作品开始的好感，原来美丽的爱情是不会真实的。 《蝙蝠侠大战超人》会英语看这类电影才适合，两位统治级别的人物的理念冲突，让我对他们理解扩宽了很多。商业娱乐片，背景知识要丰富，看这类片子才趣味更多。 《2001，漫游太空》：看一遍之后，想看第二遍却不敢看第二遍必须看第二遍的电影，这部期待想象许久，看时被吸收被迷惑被强迫思考的电影，它让我对电影可能燃烧的痴迷被冷静，因为我无法想象真正的电影是怎么拍出来的，于是它给我的冷静思考。 《母亲》在腾讯视频上看完的，韩国电影看的也蛮多的，也开始领略到韩国电影的魅力了。结尾，我害怕那老母亲再切到手指，最后，一切都得到转机了。一句台词：”别哭了”——要生存要保护自己和亲人。犯错，世界从不是黑白分明的。最后我们知道傻儿是凶手，可谁会仇恨，只有恐惧，罪恶就是罪恶，无法逃避，我们谁都得接受这罪恶地狱般的人间。犯错了，如何遗忘，犹如《老男孩》最后也唯有选择遗忘。只是我能找到穴位吗？公车上群魔乱舞的人群中有我吗？无法挑剔的电影，故事如此的吸引我，头昏脑胀也坚持看完。 《玻璃之城》：电影外的现实，我可能要过很久才能懂电影呢。让我有些惆怅。人生可能真的很长，人生重要的人就那么一两个。这是一个感动的电影，感动是不需过度解读的，看着随便想想那些重要的记忆，这样的电影就是划出时间，让人沉浸自己的回忆中。回忆过去，回忆经历的时代，活过的日子。忧郁悲伤时看过去的电影，过去的老歌，静静的流泪好了，流逝的时光就像楼道的阳光，只在回忆里真实。张婉婷导演。 《魔法奇幻秀》：电影就是电影，我对电影的视觉美学了解得还太肤浅，仅仅看画面阅读表面是太简单的，有点象为逃避工作的消遣一样，看懂表面意思可能觉得自己很高明，如何把电影带进生活带进思想才是我想做必须做的。该研究它，深入机理的思考一部电影完成需要多少，我理解的好该什么样，喜欢电影的什么，要做的很多，而不是仅仅看。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的迷茫]]></title>
    <url>%2Fpassages%2F2016-05-05-%E6%88%91%E7%9A%84%E8%BF%B7%E8%8C%AB%2F</url>
    <content type="text"><![CDATA[迷茫久一点会发觉，整个世界空荡荡，生活空荡荡，每天24小时空荡荡，什么事什么东西看起来做起来都是空荡荡的无聊和无聊的空荡荡。 很多次，对人生对世界，还有对未来，深感迷茫和无力，一切都是虚无，觉得什么都没有意义。 这个城市的庞杂和喧嚣，忙碌上车，下车的人群，雷同的高楼，开始带来的是极度的疲倦和不适，茫然和恐惧。有一种无法缓和的内在紧张感。 自己也有想放弃的时候，在去火车站的地铁上，头向后斜靠用右手撑着，久久看着对面的玻璃上无望的自己贴在忽停忽明的隧道壁上，一时间眼泪不知不觉充溢满眼睛上，整个人伤感起来，问自己：自己到底想怎样？累，都休息这么久，反而随便奔波一下就疲惫了，别勉强自己，什么都通通放过去吧，梦想，失败，委屈，苦难都让它们过去，放弃，别想太多。 其实口口声声梦想长梦想短的，我不觉得梦想非实现不可，只是最重要的，爱的人没出现，梦想就排在第一位。或许未来我会成拉面师傅，出租车司机，剪辑师，程序员之类随便什么的。只是人年轻，谈工作好枯燥，把工作说成梦想，即拉风又能和乏味的人划出界限，工作就是梦想，仅此而已。反正什么都没有，干嘛说放弃，有什么内容可以放弃，为显得酷点，就把梦想之类，长挂嘴边，所以有工作有梦想并不就是不迷茫。 说远了，迷茫究竟是什么？ 我的迷茫是，自己给自己自由，寻找方向，也订过一个世俗目光都喜欢认可的目标——为钱拼命。于是勤劳努力了很长时间，克服困难，经受磨砺，发现还是迷茫。 我的迷茫是，自卑，缺少安全感，紧张恐惧，一无所有。 我的迷茫发现梦想了，也发现梦想并不重要，也知道梦想就是满大街的垃圾到处都是，实现梦想后我还会迷茫，于是把梦想梦得可望不可即，让自己处出不断前进赶路的状态。这样可以缓解迷茫折磨。 我的迷茫是，因为我要的是幸福呀。排在第一的是：“平凡的幸福生活”。那么幸福会是迷茫的结束吗？或者迷茫也是幸福的一部分，寻找也是种幸福？我是在安慰自己吗？ 经过迷茫，面对过迷茫，才感觉的到自己想要的是“幸福”，不是金钱名利，被迷茫了，会给我要幸福加给定语‘平凡’。接下来，我还在迷茫，迷茫又会给我什么呢！]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你好，世界]]></title>
    <url>%2Fpassages%2F2016-03-22-hello-world%2F</url>
    <content type="text"><![CDATA[一直想找个空间记录些我有过的一些处境，比如没确定的方向，迷茫，孤独等等；这些问题，就是迫使自己搭建自己blog的原因吧。 封闭长达一年的时间，几次想好好写下的点什么，都还是艰难，其中最大的原因是封闭，一场自我封闭的反思，不吸收不产出。想独自旅行，带着这个愿望去随时准备着，或许，从那回来，我就开心了吧。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
</search>
